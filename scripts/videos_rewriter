#!/bin/bash

# Default color values
D_FG=39
D_BG=49
D_FM=0

colorize () {
  [ -n "$1" ] || return 65;
  local FC="\033["
  local RC="\033[0m"
  [ -n "$4" ] && FC="${FC}${4};" || FC="${FC}${D_FM};";
  [ -n "$2" ] && FC="${FC}${2};" || FC="${FC}${D_FG};";
  [ -n "$3" ] && FC="${FC}${3}m" || FC="${FC}${D_BG}m";
  msg="$1"
  echo -e "${FC}${msg}${RC}";
}

center () {
  msg=" $1 ";
  while [ ${#msg} -lt $COLUMNS ]; do
    [ $((${#msg} % 2)) -eq 0 ] && msg="$msg " || msg=" $msg"
  done
}

banner () {
  msg=" $1 ";
  while [ ${#msg} -lt $COLUMNS ]; do
    msg="$msg "
  done
}

banner_right () {
  msg=" $1 ";
  while [ ${#msg} -lt $COLUMNS ]; do
    msg=" $msg"
  done
}

###########################################################
# Renaming functions
###########################################################

rename_files_to_uppercase () {
  ls | while read filename;
  do
    n=`echo "$filename" | tr "[:lower:]" "[:upper:]"`;
    if [ -e "$filename" ] && [ "$filename" != "$n" ]; then
      mv "$filename" "$n";
    fi
  done
}

rename_files_no_spaces () {
  ls | while read filename;
  do
    if [ -e "$filename" ] && [ "$filename" != "${filename// /}" ]; then
      mv "$filename" "${filename// /}";
    fi
  done
}

rename_claimed_resolutions () {
  for file in `ls | grep -E '^[0-9]+X[0-9]+_'`; do
    if [ -f $file ]; then
      newfilename=`echo ${file} | sed -E 's/^([0-9]+)X([0-9]+)_/\1x\2_/'`
      mv -v "$file" "$newfilename"
    fi
  done
}

_fix_video () {
  dir="$1"
  cd "$dir"
  colorize " Working files inside '${dir}' ...  " 30 42
  
  # parameters
  video_options="-b 100k -r 13"
  audio_options="-ab 30k -ar 22050"
  qcomp=" -qcomp 0.5" # compression
  
  # make sure the videos don't have damaged headers
  for video in `ls -S | grep -Ei '(mp4|3gp)$'`; do
    issue=`ffmpeg -i $video 2>&1 | grep -Ei '(damaged|error|problem|failed)'`
    if [ -n "$issue" ]; then
      colorize "  $issue :: you should remove this video file '$video'." 31
      # rm $video
      videoname=`echo "$video" | sed -E 's/^[0-9]+X[0-9]+_([[:alnum:]]+)\.[[:alnum:]]{3}$/\1/g' | grep -Eiv '(mp4|3gp)$' | sort -u`
      resolution=`echo "${video%%_*}" | tr "[:upper:]" "[:lower:]"`
      extension="${video##*.}"
      format=`echo "${extension}" | tr "[:upper:]" "[:lower:]"`
      colorize "  ${resolution} -> ${videoname} -> ${extension}" 33
      
      # starter values (minimum values to generate at least one video)
      ref_width=`echo "$resolution" | awk -Fx '{ print $1 }'`
      ref_height=`echo "$resolution" | awk -Fx '{ print $2 }'`
      source_video=''
      for videofile in `ls *_${videoname}.* | grep -Ei "(mp4|3gp)$" 2> /dev/null`; do
        res="${videofile%%_*}"
        if [ -n "${res}" ]; then 
          width=`echo "$res" | awk -FX '{ print $1 }'`
          height=`echo "$res" | awk -FX '{ print $2 }'`
        
          if [ "$width" -ge $ref_width ] && [ "$height" -ge $ref_height ]; then
            source_video="${videofile}"
            ref_width=$width
            ref_height=$height
          fi
        fi
      done
      if [ -n "$source_video" ]; then
        colorize "    found source video: ${source_video}" 36
        
        # new video name
        new_video_name="${resolution/x/X}_${videoname}.${extension}"
        
        new_width=`echo "$resolution" | awk -Fx '{ print $1 }'`
        new_height=`echo "$resolution" | awk -Fx '{ print $2 }'`
        
        if [ $new_width -le $ref_width ] && [ $new_height -le $ref_height ]; then
          if [ $(($new_width / 4)) -eq $(($new_height / 3)) ]; then
            aspect="4:3"
            aspect_param=" -aspect 4:3"
          elif [ $(($new_width / 3)) -eq $(($new_height / 2)) ]; then
            aspect="3:2"
            aspect_param=" -aspect 3:2"
          elif [ $(($new_width / 16)) -eq $(($new_height / 9)) ]; then
            aspect="16:9"
            aspect_param=" -aspect 16:9"
          elif [ $(($new_width / 11)) -eq $(($new_height / 9)) ]; then
            aspect="11:9"
            aspect_param=" -aspect 11:9"
          else
            aspect="unknown"
            aspect_param=""
          fi
          # if [ ! -f "${new_video_name}" ]; then
            colorize "    creating ${extension} using ${aspect} ratio: ${source_video} => ${new_video_name}"
            colorize "      ffmpeg -i ${source_video} -vcodec mpeg4 ${video_options} -acodec copy -s ${resolution}${aspect_param}${qcomp} -y -f ${format} ${new_video_name}" 35
            `ffmpeg -i ${source_video} -vcodec mpeg4 ${video_options} -acodec copy -s ${resolution}${aspect_param}${qcomp} -y -f ${format} ${new_video_name}` #  2>&1 | grep -Ei '(damaged|error|problem|failed)'
          # fi          
        fi
      else
        colorize "    try looking for another video type" 35
      fi
    fi
    size=`du -k "${video}" | awk '{ print $1 }'`
    # colorize "  ${video} size ${size}Kb"
    videoname=`echo "$video" | sed -E 's/^[0-9]+X[0-9]+_([[:alnum:]]+)\.[[:alnum:]]{3}$/\1/g' | grep -Eiv '(mp4|3gp)$' | sort -u`
    resolution=`echo "${video%%_*}" | tr "[:upper:]" "[:lower:]"`
    extension="${video##*.}"
    
    cur_width=`echo "$resolution" | awk -Fx '{ print $1 }'`
    cur_height=`echo "$resolution" | awk -Fx '{ print $2 }'`
    
    max_size=(( ($cur_width + $cur_height) * 1.25 ))
    
    if [ $size -eq 0 ]; then
      colorize "  -> removing ${video}, size: zero kb" 35
      # rm $video
    elif [ $size -gt $max_size ]; then
      colorize "  '${video}' is too big (${size}kb) ==> should be smaller than ${max_size}kb" 31
      format=`echo "${extension}" | tr "[:upper:]" "[:lower:]"`
      colorize "  ${resolution} -> ${videoname} -> ${extension}" 33
      
      # starter values (minimum values to generate at least one video)
      ref_width=`echo "$resolution" | awk -Fx '{ print $1 }'`
      ref_height=`echo "$resolution" | awk -Fx '{ print $2 }'`
      source_video=''
      for videofile in `ls *_${videoname}.* | grep -Ei "(mp4|3gp)$" 2> /dev/null`; do
        res="${videofile%%_*}"
        if [ -n "${res}" ]; then 
          width=`echo "$res" | awk -FX '{ print $1 }'`
          height=`echo "$res" | awk -FX '{ print $2 }'`
          
          if [ "$width" -ge $ref_width ] && [ "$height" -ge $ref_height ]; then
            source_video="${videofile}"
            ref_width=$width
            ref_height=$height
          fi
        fi
      done
      if [ -n "$source_video" ]; then
        colorize "    found source video: ${source_video}" 36
        
        # new video name
        new_video_name="${resolution/x/X}_${videoname}.${extension}"
        
        if [ "${source_video}" == "$video" ] && [[ ! $video =~ '-TEMP' ]]; then
          colorize "    source video is too big, rename it to a temporary file and use it to regenerate the video file using a larger compression rate" 33
          mv $video "${resolution}_${videoname}-TEMP.${extension}"
          source_video="${resolution}_${videoname}-TEMP.${extension}"
        fi
        
        new_width=`echo "$resolution" | awk -Fx '{ print $1 }'`
        new_height=`echo "$resolution" | awk -Fx '{ print $2 }'`
        
        if [ $new_width -le $ref_width ] && [ $new_height -le $ref_height ]; then
          if [ $(($new_width / 4)) -eq $(($new_height / 3)) ]; then
            aspect="4:3"
            aspect_param=" -aspect 4:3"
          elif [ $(($new_width / 3)) -eq $(($new_height / 2)) ]; then
            aspect="3:2"
            aspect_param=" -aspect 3:2"
          elif [ $(($new_width / 16)) -eq $(($new_height / 9)) ]; then
            aspect="16:9"
            aspect_param=" -aspect 16:9"
          elif [ $(($new_width / 11)) -eq $(($new_height / 9)) ]; then
            aspect="11:9"
            aspect_param=" -aspect 11:9"
          else
            aspect="unknown"
            aspect_param=""
          fi
          colorize "    creating ${extension} using ${aspect} ratio: ${source_video} => ${new_video_name}"
          colorize "      ffmpeg -i ${source_video} -vcodec mpeg4 ${video_options} -acodec copy -s ${resolution}${aspect_param}${qcomp} -y -f ${format} ${new_video_name}" 35
          `ffmpeg -i ${source_video} -vcodec mpeg4 ${video_options} -acodec copy -s ${resolution}${aspect_param}${qcomp} -y -f ${format} ${new_video_name}` #  2>&1 | grep -Ei '(damaged|error|problem|failed)'
          
          new_size=`du -k "${new_video_name}" | awk '{ print $1 }'`
          colorize "      '${new_video_name}' is now ${new_size}kb  " 32
        fi
        
        if [ -f "${resolution}_${videoname}-TEMP.${extension}" ]; then
          colorize "    remove temporary file '${resolution}_${videoname}-TEMP.${extension}'"
          rm "${resolution}_${videoname}-TEMP.${extension}"
        fi
      fi
    fi
  done
  echo ""
  cd ..
}

for dir in `ls`; do
  if [ -d "${dir}" ]; then
    _fix_video "${dir}"
  fi
done