#!/bin/bash

###########################################################
# Appearance
###########################################################

# BLACK=30, RED=31, GREEN=32, YELLOW=33, BLUE=34, PINK=35, CYAN=36, WHITE=37
# BLACK=40, RED=41, GREEN=42, YELLOW=43, BLUE=44, PINK=45, CYAN=46, WHITE=47

# Examples of colored boxes (default colors)
# title "Testing a title box"
# info "Testing an information box"
# warning "Testing a warning box"
# error "Testing an error box"
# colorize "text message" #fg #bg #format

# Terminal size
COLUMNS=`tput cols`

colorize () {
  # Default color values
  local D_FG=39
  local D_BG=49
  local D_FM=0
  [ -n "$1" ] || return 65;
  local FC="\033["
  local RC="\033[0m"
  [ -n "$4" ] && FC="${FC}${4};" || FC="${FC}${D_FM};";
  [ -n "$2" ] && FC="${FC}${2};" || FC="${FC}${D_FG};";
  [ -n "$3" ] && FC="${FC}${3}m" || FC="${FC}${D_BG}m";
  msg="$1"
  echo -e "${FC}${msg}${RC}";
}

center () {
  msg=" $1 ";
  while [ ${#msg} -lt $COLUMNS ]; do
    [ $((${#msg} % 2)) -eq 0 ] && msg="$msg " || msg=" $msg"
  done
}

banner () {
  msg=" $1 ";
  while [ ${#msg} -lt $COLUMNS ]; do
    msg="$msg "
  done
}

banner_right () {
  msg=" $1 ";
  while [ ${#msg} -lt $COLUMNS ]; do
    msg=" $msg"
  done
}

title () {
  banner "$1";
  colorize "$msg" 30 42 1;
}

warning () {
  banner "$1";
  colorize "$msg" 30 43 1;
}

error () {
  banner "$1";
  colorize "$msg" 37 41 1;
}

info () {
  banner "$1";
  colorize "$msg" 34 47 1;
}

_get_video_size_ratio () {
  if [ $(($new_width / 4)) -eq $(($new_height / 3)) ]; then
    aspect="4:3"
    aspect_param=" -aspect 4:3"
  elif [ $(($new_width / 3)) -eq $(($new_height / 2)) ]; then
    aspect="3:2"
    aspect_param=" -aspect 3:2"
  elif [ $(($new_width / 16)) -eq $(($new_height / 9)) ]; then
    aspect="16:9"
    aspect_param=" -aspect 16:9"
  elif [ $(($new_width / 11)) -eq $(($new_height / 9)) ]; then
    aspect="11:9"
    aspect_param=" -aspect 11:9"
  elif [ $new_width -eq $new_height ]; then
    aspect="1:1"
    aspect_param=" -aspect 1:1"
  else
    aspect="unknown"
    aspect_param=""
  fi
}

# required variables are
# extension, format, aspect, aspect_param, qcomp, qcomp_param, video_options, video_bitrate, video_frames, resolution, source_video, new_video_name
_generate_video_with_ffmpeg () {
  colorize "    generating ${extension} video using ${aspect} ratio, ${qcomp} compression rate, video bitrate ${video_bitrate}, ${video_frames} fps, from ${source_video} ==> ${new_video_name}"
  colorize "      ffmpeg -i ${source_video} -vcodec mpeg4 ${video_options} -acodec copy -s ${resolution}${aspect_param}${qcomp_param} -y -f ${format} ${new_video_name}" 34
  ffmpeg -i ${source_video} -vcodec mpeg4 ${video_options} -acodec copy -s ${resolution}${aspect_param}${qcomp_param} -y -f ${format} ${new_video_name} 2> /dev/null
}

_fix_video () {
  dir="$1"
  cd "$dir"
  title "Working with files inside ${dir}"
  chmod 644 *.MP4 2> /dev/null
  chmod 644 *.3GP 2> /dev/null
  
  # video parameters
  video_bitrate="100k"
  video_frames="13"
  video_options="-b ${video_bitrate} -r ${video_frames}"
  # audio parameters
  audio_bitrate="30k"
  audio_frequency="12000"
  audio_options="-ab ${audio_bitrate} -ar ${audio_frequency}"
  
  # compression parameters
  qcomp="0.5" # compression
  qcomp_param=" -qcomp ${qcomp}"
  
  # make sure the videos don't have damaged headers
  for video in `ls -S | grep -Ei '^[0-9]+X[0-9]+_(\[?[[:alnum:]\_]+\]?)\.(mp4|3gp)$'`; do
    videoname=`echo "$video" | sed -E 's/^[0-9]+X[0-9]+_(\[?[[:alnum:]\_]+\]?)\.(MP4|3GP)$/\1/g' | grep -Eiv '(mp4|3gp)$' | sort -u`
    resolution=`echo "${video%%_*}" | tr "[:upper:]" "[:lower:]"`
    extension="${video##*.}"
    format=`echo "${extension}" | tr "[:upper:]" "[:lower:]"`
    
    issue=`ffmpeg -i $video 2>&1 | grep -Ei '(damaged|error|problem|failed)'`
    if [ -n "$issue" ]; then
      colorize "  $issue :: this video file '$video' will be generated again." 31
      colorize "  ${resolution} -> ${videoname} -> ${extension}" 33
      
      # starter values (minimum values to generate at least one video)
      ref_width=`echo "$resolution" | awk -Fx '{ print $1 }'`
      ref_height=`echo "$resolution" | awk -Fx '{ print $2 }'`
      source_video=''
      for videofile in `ls *_${videoname}.* | grep -Ei "(mp4|3gp)$" 2> /dev/null`; do
        res="${videofile%%_*}"
        if [ -n "${res}" ]; then 
          width=`echo "$res" | awk -FX '{ print $1 }'`
          height=`echo "$res" | awk -FX '{ print $2 }'`
        
          if [ "$width" -ge $ref_width ] && [ "$height" -ge $ref_height ]; then
            source_video="${videofile}"
            ref_width=$width
            ref_height=$height
          fi
        fi
      done
      if [ -n "$source_video" ]; then
        colorize "    found source video: ${source_video}" 36
        
        # new video name
        new_video_name="${resolution/x/X}_${videoname}.${extension}"
        
        new_width=`echo "$resolution" | awk -Fx '{ print $1 }'`
        new_height=`echo "$resolution" | awk -Fx '{ print $2 }'`
        
        if [ $new_width -le $ref_width ] && [ $new_height -le $ref_height ]; then
          # get video size ratio
          _get_video_size_ratio
          
          # generate the video
          _generate_video_with_ffmpeg
        fi
      else
        colorize "    try looking for another video type" 35
      fi
    fi
    
    # check video bitrates, and generate the videos again if needed (trying to minimize the file size)
    # TODO: make this happen
    # cur_video_bitrate=`ffmpeg -i $video 2>&1 | grep "bitrate:" | sed -E 's/^.+bitrate: ([0-9]+).+$/\1/g'
    
    
    # check and enforce file size limits now
    size=`du -k "${video}" | awk '{ print $1 }'`
    
    cur_width=`echo "$resolution" | awk -Fx '{ print $1 }'`
    cur_height=`echo "$resolution" | awk -Fx '{ print $2 }'`
    
    if [ $cur_width -gt 320 ]; then
      max_size=$(( $cur_width + $cur_height + (($cur_width + $cur_height)/10) ))
    else
      max_size=$(( $cur_width + $cur_height + (($cur_width + $cur_height)/4) + (560 - $cur_width + $cur_height) ))
    fi
    
    if [ $size -gt $max_size ] || [ $size -eq 0 ] || [ $size -lt 100 ]; then
      colorize "  ${resolution} :: ${videoname} :: ${extension} :: ${size}Kb > ${max_size}Kb" 33
      
      # starter values (minimum values to generate at least one video)
      ref_width=`echo "$resolution" | awk -Fx '{ print $1 }'`
      ref_height=`echo "$resolution" | awk -Fx '{ print $2 }'`
      source_video=''
      for videofile in `ls -S *_${videoname}.* | grep -Ei "(mp4|3gp)$" 2> /dev/null`; do
        res="${videofile%%_*}"
        if [ -n "${res}" ]; then 
          width=`echo "$res" | awk -FX '{ print $1 }'`
          height=`echo "$res" | awk -FX '{ print $2 }'`
          
          ref_size=`du -k "${videofile}" | awk '{ print $1 }'`
          
          if [ $width -gt 320 ]; then
            ref_max_size=$(( $width + $height + (($width + $height)/10) ))
          else
            ref_max_size=$(( $width + $height + (($width + $height)/4) + (560 - $cur_width + $cur_height) ))
          fi
          
          if [ "$width" -ge $ref_width ] && [ "$height" -ge $ref_height ] && [ "$ref_size" -gt 50 ] && [ "$ref_size" -le $ref_max_size ]; then
            source_video="${videofile}"
            ref_width=$width
            ref_height=$height
          fi
        fi
      done
      if [ -n "$source_video" ]; then
        colorize "    found source video: ${source_video}" 36
        
        # new video name
        new_video_name="${resolution/x/X}_${videoname}.${extension}"
        
        if [ "${source_video}" == "$video" ] && [[ ! $video =~ '-TEMP' ]]; then
          # colorize "    source video is too big, rename it to a temporary file and use it to generate it again" 33
          mv $video "${resolution}_${videoname}-TEMP.${extension}"
          source_video="${resolution}_${videoname}-TEMP.${extension}"
        fi
        
        new_width=`echo "$resolution" | awk -Fx '{ print $1 }'`
        new_height=`echo "$resolution" | awk -Fx '{ print $2 }'`
        
        if [ $new_width -le $ref_width ] && [ $new_height -le $ref_height ]; then
          # get video size ratio
          _get_video_size_ratio
          
          # generate the video
          _generate_video_with_ffmpeg
          
          new_size=`du -k "${new_video_name}" | awk '{ print $1 }'`
                    
          if [ "$new_size" -le $max_size ]; then
            colorize "    ${resolution} :: ${videoname} :: ${extension} :: ${new_size}Kb < ${max_size}Kb" 32
          elif [ "$new_size" -eq $size ]; then
            colorize "    NO CHANGE IN SIZE :: ${size}Kb :: ${resolution} :: ${videoname} :: ${extension}" 35
          elif [ "$new_size" -le $(( $max_size + ($max_size)/10 )) ]; then
            colorize "    CLOSE ENOUGH? :: ${new_size}Kb > ${max_size}Kb :: ${resolution} :: ${videoname} :: ${extension}" 33
          else
            colorize "    TOO BIG :: ${new_size}Kb > ${max_size}Kb :: ${resolution} :: ${videoname} :: ${extension}" 31
          fi
        fi
        
        if [ -f "${resolution}_${videoname}-TEMP.${extension}" ]; then
          rm "${resolution}_${videoname}-TEMP.${extension}"
        fi
      fi
    elif [ $size -le $max_size ]; then
      colorize "  ${resolution} :: ${videoname} :: ${extension} :: ${size}Kb <= ${max_size}Kb" 32
    fi
  done
  cd ..
}

# rsync -Prtlpmhn --exclude "**/*.GIF" --exclude "**/*.dm" root@salt1:/usr/local/multimedia/BRAZIL/videos/ .

for dir in `ls`; do
  if [ -d "${dir}" ]; then
    _fix_video "${dir}"
    rm 1.* 2> /dev/null
    echo ""
  fi
done

# rsync -Prtlpmhn --exclude "**/*.GIF" --exclude "**/*.dm" . root@salt1:/usr/local/multimedia/BRAZIL/videos/

exit $?
