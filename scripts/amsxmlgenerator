#!/usr/bin/ruby

# generates XML files to be uploaded along with the packs they are in
# to import contents to the AMS platform

# Configuration
require 'rubygems'
require 'highline'
require 'fastercsv'
require 'nokogiri'
require 'fileutils'
require 'ftools'
require 'digest/md5'

$LOAD_PATH << File.dirname(__FILE__)
require 'util.rb'
require 'string_class.rb'
require 'integer_class.rb'
require 'time_class.rb'

# Location of the content related csv files
CONTENT_ROOT = '/Volumes/PublicoSP/remoteITcontents'
GAMES_CSV = FasterCSV.table(CONTENT_ROOT + '/info-games.csv', :col_sep => ';')
IMAGES_CSV = FasterCSV.table(CONTENT_ROOT + '/info-images.csv', :col_sep => ';')
SONGS_CSV = FasterCSV.table(CONTENT_ROOT + '/info-songs.csv', :col_sep => ';')
VIDEOS_CSV = FasterCSV.table(CONTENT_ROOT + '/info-videos.csv', :col_sep => ';')
HANDSETS_CSV = FasterCSV.table(CONTENT_ROOT + '/handset-itemtypeid.csv')

# read files in all directories and write a XML file for every single
# content pack, after that upload the results to the AMS file server,
# probably using rsync, if possible.
# 
# After all files are uploaded create the file xmlname.go for every pack
# and sync the file structure again, this should start the import
# proccess.

supplier_id = 12345
external_id = 'examplecontentnamerandomnumber'
content_name = 'Example Content Name'
content_size = 391239

images = videos = sounds = jgames = [1,2,3]

AMS_CONTENT_DIR = CONTENT_ROOT + "/ams"


@itemtype_name_patterns = {
  :images => {
    1147 => '_1200x1200.jpg',
    1148 => '_1200x900.jpg',
    1149 => '_900x1200.jpg',
    1150 => '_675x1200.jpg'
  },
  :videos => {
    1718 => '_h263_aac_176x144.3gp',
    1719 => '_h263_aac_352x288.3gp',
    1720 => '_mpeg4_aac_176x144.3gp',
    1721 => '_mpeg4_aac_352x288.3gp',
    789 => '_MPEG_SOURCE.mpg',
    501 => '_WMV_SOURCE.wmv'
  },
  :sounds => {
    82 => '.mp3'
  }
}

def file_md5sum path
  # return the md5sum of a given file
  content_md5sum = Digest::MD5.hexdigest(external_id)
end

# IMAGE EXAMPLE
# 1147 - color image MASTER 1200x1200 jpg
# 1148 - color image MASTER 1200x900 jpg
# 1149 - color image MASTER 900x1200 jpg
def images_xml image_names, supplier_id, content_name, content_size
  # get images informations
  # md5hash = MD5.new(File.read('path_to_file', 'b')).hexdigest
  external_id = "image#{supplier_id}#{content_name.downcase.gsub(/ /,'')}#{content_size}"
  content_md5sum = Digest::MD5.hexdigest(external_id)
  
  xml_result = Nokogiri::XML::Builder.new(:encoding => "UTF-8") do
    contentimport(:xmlns => "http://arvato-mobile.com/transfer", :supplierid => supplier_id, :date => "2010-10-10", 'xmlns:xsi' => "http://www.w3.org/2001/XMLSchema-instance", 'xmlns:xsd' => "http://www.w3.org/2001/XMLSchema", 'xsi:schemaLocation' => "http://arvato-mobile.com/transfer http://images.handy.de/fundb/xsd/arvato_transfer_1_6_2.xsd") {
      image_names.each do |image|
        article(:articletypeid => 8) {
          idbag {
            externalid "#{external_id}-#{image}"
          }
          artist(:role => "Main") {
            name "No Artist"
          }
          title("#{content_name} #{image}", :loc => 'ww')
          licensor "FILL IN YOUR LICENSOR NAME HERE"
          keyword "My Keyword1"
          keyword "My Keyword2"
          contentgrading 0
          genre "My genre1"
          genre "My genre2"
          category "import" # fixed value
          attribute(:key => "VF_AssetID", :value => "Fill in Asset ID	X here")
          attribute(:key => "General Reporting Code", :value => "EA_000001_ww")
          territory {
            c "BR"
            dRelDate "2010-10-10+01:00"
            priceinfo {
              effectivedate "1970-01-01+01:00"
              pricecode "DEFAULT"
            }
          }
          item(:itemtypeid => 1147) {
            binary('contentname_color_image_MASTER_1200x1200.jpg', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
          item(:itemtypeid => 1148) {
            binary('contentname_color_image_MASTER_1200x900.jpg', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
          item(:itemtypeid => 1149) {
            binary('contentname_color_image_MASTER_900x1200.jpg', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
          item(:itemtypeid => 1150) {
            binary('contentname_color_image_MASTER_675x1200.jpg', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
        }
      end
    }
  end
  return xml_result.to_xml
end

# VIDEO EXAMPLE
# 243 - Video7 176x144 - Video7 mp4 in 3gp 176x144
# 244 - Video7 128x96 - Video7 mp4 in 3gp 128x96
# 1720 - FLMV_mpeg4_aac_176x144.3gp
# 1721 - FLMV_mpeg4_aac_352x288.3gp
def videos_xml video_names
  xml_result = Nokogiri::XML::Builder.new(:encoding => "UTF-8") do
    contentimport(:xmlns => "http://arvato-mobile.com/transfer", :supplierid => supplier_id, :date => "2010-10-10", 'xmlns:xsi' => "http://www.w3.org/2001/XMLSchema-instance", 'xmlns:xsd' => "http://www.w3.org/2001/XMLSchema", 'xsi:schemaLocation' => "http://arvato-mobile.com/transfer http://images.handy.de/fundb/xsd/arvato_transfer_1_6_2.xsd") {
      video_names.each do |video|
        article(:articletypeid => 28) {
          idbag {
            externalid "#{external_id}video#{video}"
          }
          artist(:role => "Main") {
            name "No Artist"
          }
          title("#{content_name} #{video}", :loc => 'ww')
          licensor "FILL IN YOUR LICENSOR NAME HERE"
          keyword "My Keyword1"
          keyword "My Keyword2"
          contentgrading 0
          genre "My genre1"
          genre "My genre2"
          category "import" # fixed value
          attribute(:key => "VF_AssetID", :value => "Fill in Asset ID	X here")
          attribute(:key => "General Reporting Code", :value => "EA_000001_ww")
          territory {
            c "BR"
            dRelDate "2010-10-10+01:00"
            priceinfo {
              effectivedate "1970-01-01+01:00"
              pricecode "DEFAULT"
            }
          }
          duration "271" # seconds
          articlebinary('video_cover_600x600.jpg', :type => 'FLMV_cover600x600', :md5sum => content_md5sum, :filesize => content_size)
          articlebinary('video_screencapture_640x480.jpg', :type => 'FLMV_screen capture source_640x480', :md5sum => content_md5sum, :filesize => content_size)
          item(:itemtypeid => 1718) {
            binary('MisterMusicVideo_1234567891941_FLMV_h263_aac_176x144.3gp', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
          item(:itemtypeid => 1719) {
            binary('MisterMusicVideo_1234567891942_FLMV_h263_aac_352x288.3gp', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
          item(:itemtypeid => 1720) {
            binary('MisterMusicVideo_1234567891943_FLMV_mpeg4_aac_176x144.3gp', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
          item(:itemtypeid => 1721) {
            binary('MisterMusicVideo_1234567891944_FLMV mpeg4 aac 352x288.3gp', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
          item(:itemtypeid => 789) {
            binary('MisterMusicVideo_1234567891944_FLMV_MPEG_SOURCE.mpg', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
          item(:itemtypeid => 501) {
            binary('MisterMusicVideo_1234567891944_FLMV_WMV_SOURCE.wmv', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
        }
      end
    }
  end
  return xml_result.to_xml
end

# REAL SOUND EXAMPLE
# 82 - Real Sound MP3
# REAL MUSIC
# 515 - Real Music Source WAV Master Cut 36
# 516 - Real Music Source WAV Master Cut 20
# 518 - Real Music Source WAV Master Cut 12
# 519 - Real Music Source WAV Master Cut 7
def sounds_xml sound_names
  xml_result = Nokogiri::XML::Builder.new(:encoding => "UTF-8") do
    contentimport(:xmlns => "http://arvato-mobile.com/transfer", :supplierid => supplier_id, :date => "2010-10-10", 'xmlns:xsi' => "http://www.w3.org/2001/XMLSchema-instance", 'xmlns:xsd' => "http://www.w3.org/2001/XMLSchema", 'xsi:schemaLocation' => "http://arvato-mobile.com/transfer http://images.handy.de/fundb/xsd/arvato_transfer_1_6_2.xsd") {
      sound_names.each do |sound|
        article(:articletypeid => 13) {
          idbag {
            externalid "#{external_id}sound#{sound}"
          }
          artist('role' => "Main") {
            name "No Artist"
          }
          title("#{content_name} #{sound}", 'loc' => 'ww')
          licensor "FILL IN YOUR LICENSOR NAME HERE"
          keyword "My Keyword1"
          keyword "My Keyword2"
          contentgrading 0
          genre "My genre1"
          genre "My genre2"
          category "import" # fixed value
          attribute(:key => "VF_AssetID", :value => "Fill in Asset ID	X here")
          attribute(:key => "General Reporting Code", :value => "EA_000001_ww")
          territory {
            c "BR"
            dRelDate "2010-10-10+01:00"
            priceinfo {
              effectivedate "1970-01-01+01:00"
              pricecode "DEFAULT"
            }
          }
          duration 271 # seconds
          articlebinary('EUEDD03120226_coversource800x800.jpg', :type => 'Real_music_coversource800x800', :md5sum => content_md5sum, :filesize => content_size)
          # Real Music Source WAV Master Cut 36
          item(:itemtypeid => 515) {
            binary('EUEDD03120226_36.wav', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
          # Real Music Source WAV Master Cut 20
          item(:itemtypeid => 516) {
            binary('EUEDD03120226_20.wav', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
          # Real Music Source WAV Master Cut 12
          item(:itemtypeid => 518) {
            binary('EUEDD03120226_12.wav', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
          # Real Music Source WAV Master Cut 7
          item(:itemtypeid => 519) {
            binary('EUEDD03120226_7.wav', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
        }
      end
    }
  end
  return xml_result.to_xml
end

# GAME EXAMPLE
# look in the handset-itemtypeid.csv
def games_xml jgame_names
  xml_result = Nokogiri::XML::Builder.new(:encoding => "UTF-8") do
    contentimport(:xmlns => "http://arvato-mobile.com/transfer", :supplierid => supplier_id, :date => "2010-10-10", 'xmlns:xsi' => "http://www.w3.org/2001/XMLSchema-instance", 'xmlns:xsd' => "http://www.w3.org/2001/XMLSchema", 'xsi:schemaLocation' => "http://arvato-mobile.com/transfer http://images.handy.de/fundb/xsd/arvato_transfer_1_6_2.xsd") {
      jgame_names.each do |jgame|
        article(:articletypeid => 4) {
          idbag {
            externalid "#{external_id}game#{jgame}"
          }
          artist(:role => "Main") {
            name "No Artist"
          }
          title("#{content_name} #{jgame}", 'loc' => 'ww')
          licensor "FILL IN YOUR LICENSOR NAME HERE"
          keyword "My Keyword1"
          keyword "My Keyword2"
          contentgrading 20 # from 0 to 60, incremented by 10
          genre "My genre1"
          genre "My genre2"
          category "import" # fixed value
        
          attribute(:key => "Type", :value => "game")
          attribute(:key => "General Reporting Code", :value => "EA_000001_ww")
          attribute(:key => "CopyrightInfo", :value => "(C) 2010, ABC-Games ltd.")
        
          localizedattribute(:key => "JavaGameDescriptionTagline", :loc => "ww", :value => "")
          localizedattribute(:key => "JavaGameDescriptionShort", :loc => "ww", :value => "")
          localizedattribute(:key => "JavaGameDescription", :loc => "ww", :value => "")
        
          territory {
            c "BR"
            dRelDate "2010-10-10+01:00"
            priceinfo {
              effectivedate "1970-01-01+01:00"
              pricecode "DEFAULT"
            }
          }
          # java games artible binary types
          # Examples for marketing material. For detailed info please review "marketing_descriptions_xxxxxxxx.xls"
          articlebinary('NiceWetBabes_animated_101x120.gif', :type => 'Game_Ingame-Trailer_101x120', :md5sum => content_md5sum, :filesize => content_size)
          articlebinary('NiceWetBabes_animated_240x320.gif', :type => 'Game_Ingame-Trailer_240x320', :md5sum => content_md5sum, :filesize => content_size)
          # articlebinary('NiceWetBabes_01_240x320.gif', :type => 'Game_Ingame1_240x320', :md5sum => content_md5sum, :filesize => content_size)
          # articlebinary('NiceWetBabes_02_240x320.gif', :type => 'Game_Ingame2_240x320', :md5sum => content_md5sum, :filesize => content_size)
          articlebinary('Game_Icon_85x85.png', :type => 'Game_Icon_85x85', :md5sum => content_md5sum, :filesize => content_size)
        
          # Java game Item type
          # references available files and handset-itemtypeid.csv
          item(:itemtypeid => 259) {
            binary('NiceWetBabes_phone_model_ww.jad', :kind => "Binary", :md5sum => content_md5sum, :filesize => content_size)
          }
        
        }
      end
    }
  end
  return xml_result.to_xml
end

puts GAMES_CSV.first.inspect

# FileUtils.mkdir_p AMS_CONTENT_DIR if !File.exist?(AMS_CONTENT_DIR)
content_root = Dir.new(AMS_CONTENT_DIR)

# content_root.each do |content_package|
#   puts content_package.entries.join("\n").pink
# end

# puts images_xml(images, supplier_id, content_name, content_size)
