#!/bin/bash

# this script takes the raw structure and generates the AMS structure
# followed by yet another script that will generate the necessary XML
# files, with the required information.
# The ruby script is called: amsxmlgenerator

# Basic variables
SCRIPT_NAME=`basename $0`
SCRIPT_DIR=`dirname $0`
source "${SCRIPT_DIR}/_function_colorize"

CONTENT_SOURCE_DIRECTORY="/Volumes/PublicoSP/remoteITcontents/raw_content"
CONTENT_TARGET_DIRECTORY="/Volumes/PublicoSP/remoteITcontents/ams"
DATETIME="201010101010"

_rename_files_no_spaces () {
  ls | while read filename; do
    if [ -e "$filename" ] && [ "$filename" != "${filename// /}" ]; then
      mv "$filename" "${filename// /}";
    fi
  done
}

_rename_files_properly () {
  if [ -d $1 ]; then
    cd $1
    for file in `ls`; do
      newfilename=`echo $file | tr "[[:upper:]]" "[[:lower:]]"`
      newfilename="${newfilename//[/}"
      newfilename="${newfilename//]/_}"
      newfilename="${newfilename//(/}"
      newfilename="${newfilename//)/_}"
      newfilename="${newfilename//__/_}"
      if [ "$file" != "$newfilename" ]; then
        mv -v $file $newfilename
      fi
    done
    cd -
  fi
}

_init_target_dir_content_pack () {
  target_dir="${CONTENT_TARGET_DIRECTORY}/${pack_name}"
  [ ! -d $target_dir ] && mkdir -p $target_dir
  colorize "    content pack: $pack_name ($target_dir)" 32
  touch $target_dir/$pack_name.xml
}

_export_games () {
  pack_name="${DATETIME}_game_${provider_name}_${content_pack//_/}_insert"
  _init_target_dir_content_pack
  
  # previews
  if [ -f ICO_WEB.GIF ]; then
    [ ! -f $target_dir/_wap_preview.jpg ] && convert -size '100x100' -thumbnail '100x100!' ICO_WEB.GIF $target_dir/_wap_preview.jpg
    [ ! -f $target_dir/_web_preview.jpg ] && convert -size '200x200' -thumbnail '200x200!' ICO_WEB.GIF $target_dir/_web_preview.jpg
  fi
  
  [ -f INFO.TXT ] && cp -n INFO.TXT $target_dir/info.txt
  [ -f LONG.TXT ] && cp -n LONG.TXT $target_dir/long.txt
  [ -f SHORT.TXT ] && cp -n SHORT.TXT $target_dir/short.txt
  
  # java files directory
  [ ! -d $target_dir/files ] && mkdir -p $target_dir/files
  
  _rename_files_no_spaces
  
  regexp="(ALCATEL|AMOI|BENQ|BLACKBERRY|HTC|HUAWEI|KYOCERA|LG|MOTOROLA|NEC|NOKIA|PANASONIC|PANTECH|SAGEM|SAMSUNG|SANYO|SHARP|SIEMENS|SONY.?ERICSSON|TOSHIBA|ZTE)"
  for file in `ls *.JAD | grep -Ei "$regexp"`; do
    new_filename=`echo $file | sed -E "s/${regexp}/\1-/g" | sed -E 's/SONY.ERICSSON/SONYERICSSON/' | sed -E 's/_+/_/g' | sed -E 's/(-+|-_)/-/g' | tr "[[:upper:]]" "[[:lower:]]" | sed -E 's/(_en|_it|jogos?2010[0-9]+|2010[0-9]+)//g'`
    cp -nv "$file" $target_dir/files/${new_filename}
    cp -nv "${file/.JAD/.JAR}" $target_dir/files/${new_filename/.jad/.jar}
  done
  
  # _rename_files_properly "${target_dir}"
  
  # fixing file permissions
  chmod 664 $target_dir/*.*
  chmod 664 $target_dir/files/*.*
}

_export_images () {
  pack_name="${DATETIME}_image_${provider_name}_${content_pack//_/}_insert"
  _init_target_dir_content_pack
  
  # information csv file creation
  [ ! -f $target_dir/$pack_name.csv ] && echo "provider, content pack, resolution, original filename, new filename" > $target_dir/$pack_name.csv
  
  for image in `ls | grep -Ei 'jpg$'`; do
    colorize "      exporting $image"
    
    # image resolution
    resolution=`identify $image | awk '{ print $3 }'`
    width=`echo $resolution | awk -Fx '{ print $1 }'`
    height=`echo $resolution | awk -Fx '{ print $2 }'`
    
    # new name
    imagename=${image#*_}
    imagename=${imagename%_SQR*}
    imagename=${imagename%_RET*}
    imagename=${imagename%-SQR*}
    imagename=${imagename%-RET*}
    imagename=${imagename%.*}
    imagename=${imagename//(/_}
    imagename=${imagename//)/_}
    imagename=${imagename//__/_}
    imagename=${imagename#_}
    imagename=${imagename%_}
    imagename=`echo $imagename | tr "[[:upper:]]" "[[:lower:]]"`
    
    if [ ! -f $target_dir/${imagename}_image_1200x1200.jpg ] && [ ! -f $target_dir/${imagename}_image_1200x900.jpg ] && [ ! -f $target_dir/${imagename}_image_900x1200.jpg ] && [ ! -f $target_dir/${imagename}_image_675x1200.jpg ]; then
      convert -gravity center -background white -resize '1200x1200' -extent '1200x1200' $image "$target_dir/${imagename}_image_1200x1200.jpg"
      convert -gravity center -background white -resize '1200x900' -extent '1200x900' $image "$target_dir/${imagename}_image_1200x900.jpg"
      convert -gravity center -background white -resize '900x1200' -extent '900x1200' $image "$target_dir/${imagename}_image_900x1200.jpg"
      convert -gravity center -background white -resize '675x1200' -extent '675x1200' $image "$target_dir/${imagename}_image_675x1200.jpg"
      
      # write the info to this pack's csv file
      echo "${provider_name}, ${content_pack//_/}, ${resolution}, ${image}, ${imagename}_image" >> $target_dir/$pack_name.csv
    fi
  done
  
  _rename_files_properly "${target_dir}"
  
  # fixing file permissions
  chmod 664 $target_dir/*.*
}

_export_songs () {
  pack_name="${DATETIME}_realsound_${provider_name}_${content_pack//_/}_insert"
  _init_target_dir_content_pack
  
  if [ -f ICO_WEB.GIF ]; then
    [ ! -f $target_dir/_wap_preview.jpg ] && convert -size '100x100' ICO_WEB.GIF -thumbnail '100x100!' $target_dir/_wap_preview.jpg
    [ ! -f $target_dir/_web_preview.jpg ] && convert -size '200x200' ICO_WEB.GIF -thumbnail '200x200!' $target_dir/_web_preview.jpg
  fi
  
  cp -n *.MP3 ${target_dir}/
  rm $target_dir/*_PREVIEW.MP3 2> /dev/null # make sure no errors regarding this are shown
  
  _rename_files_properly "${target_dir}"
  
  # fixing file permissions
  chmod 664 $target_dir/*.*
}

_export_videos () {
  pack_name="${DATETIME}_video_${provider_name}_${content_pack//_/}_insert"
  _init_target_dir_content_pack
  
  # information csv file
  [ ! -f $target_dir/$pack_name.csv ] && echo "provider, content pack, resolution, original filename, new filename" > $target_dir/$pack_name.csv
  
  # parameters
  video_options="-b 100k -r 13"
  audio_options="-strict experimental -ab 64k -ar 22050"
  qcomp="-qcomp 0.5" # compression
  
  # sizes
  sizes=('176x144' '352x288')
  
  for video in `ls -S | grep -Ei '(3gp|mp4)$'`; do
    colorize "      exporting $video" 36
    ref_size=`echo ${video%%_*} | tr "[[:upper:]]" "[[:lower:]]"`
    ref_width=`echo $ref_size | awk -Fx '{ print $1 }'`
    ref_height=`echo $ref_size | awk -Fx '{ print $2 }'`
    
    videoname="${video%.*}"
    videoname="${videoname#*_}"
    videoname_lowercase=`echo "$videoname" | tr "[[:upper:]]" "[[:lower:]]"`
    videoname_lowercase=${videoname_lowercase//[/}
    videoname_lowercase=${videoname_lowercase//]/}
    
    colorize "      ${provider_name}, ${content_pack}, ${ref_size}, ${video}, ${videoname_lowercase}_video"
    
    # previews
    preview="ICO_WEB_${videoname}.GIF"
    if [ -f $preview ]; then
      [ ! -f $target_dir/${videoname_lowercase}_video_web_preview.jpg ] && convert -size '200x200' -thumbnail '200x200!' $preview $target_dir/${videoname_lowercase}_video_web_preview.jpg
      [ ! -f $target_dir/${videoname_lowercase}_video_wap_preview.jpg ] && convert -size '100x100' -thumbnail '100x100!' $preview $target_dir/${videoname_lowercase}_video_wap_preview.jpg
      [ ! -f $target_dir/${videoname_lowercase}_video_cover_600x600.jpg ] && convert -size '600x600' -resize '600x600!' $preview $target_dir/${videoname_lowercase}_video_cover_600x600.jpg
    else
      colorize "  missing file $preview" 33
    fi
    
    # screen capture
    if [ ! -f $target_dir/${videoname_lowercase}_video_screencapture_640x480.jpg ]; then
      ffmpeg -i $video -f image2 -ss 4 -t 3 -r 1:4 -s 640x480 _${videoname}_%02d.jpg &> /dev/null
      if [ -f _${videoname}_02.jpg ]; then
        convert -size '640x480' -resize '640x480!' _${videoname}_02.jpg $target_dir/${videoname_lowercase}_video_screencapture_640x480.jpg
      fi
      rm _${videoname}_*.jpg 2> /dev/null # make sure no errors regarding this are shown
    fi
    
    for size in ${sizes[@]}; do
      new_width=`echo $size | awk -Fx '{ print $1 }'`
      new_height=`echo $size | awk -Fx '{ print $2 }'`
      
      # aspect ratio calculation
      if [ $(($new_width / 4)) -eq $(($new_height / 3)) ]; then
        aspect_param="-aspect 4:3"
      elif [ $(($new_width / 3)) -eq $(($new_height / 2)) ]; then
        aspect_param="-aspect 3:2"
      elif [ $(($new_width / 16)) -eq $(($new_height / 9)) ]; then
        aspect_param="-aspect 16:9"
      elif [ $(($new_width / 11)) -eq $(($new_height / 9)) ]; then
        aspect_param="-aspect 11:9"
      else
        aspect_param=""
      fi
      
      # mpeg4 aac 3gp
      new_video_mpeg4_aac_3gp="${target_dir}/${videoname_lowercase}_video_mpeg4_aac_${size}.3gp"
      if [ ! -f "$new_video_mpeg4_aac_3gp" ]; then
        colorize "      mpeg4 aac 3gp | $video => $new_video_mpeg4_aac_3gp"
        # colorize "        ffmpeg -i $video -f 3gp -vcodec mpeg4 $video_options -acodec aac $audio_options -s $size $aspect_param $qcomp -y $new_video_mpeg4_aac_3gp" 35
        ffmpeg -i $video -f 3gp -vcodec mpeg4 $video_options -acodec aac $audio_options -s $size $aspect_param $qcomp -y $new_video_mpeg4_aac_3gp 2>&1 | grep -Ei '(damaged|error|problem|failed)'
      fi
      
      # h263 aac 3gp
      new_video_h263_aac_3gp="${target_dir}/${videoname_lowercase}_video_h263_aac_${size}.3gp"
      if [ ! -f "$new_video_h263_aac_3gp" ]; then
        colorize "      h263 aac 3gp | $video => $new_video_h263_aac_3gp"
        # colorize "        ffmpeg -i $video -f 3gp -vcodec h263 $video_options -acodec aac $audio_options -s $size $aspect_param $qcomp -y $new_video_h263_aac_3gp" 35
        ffmpeg -i $video -f 3gp -vcodec h263 $video_options -acodec aac $audio_options -s $size $aspect_param $qcomp -y $new_video_h263_aac_3gp 2>&1 | grep -Ei '(damaged|error|problem|failed)'
      fi
    done
    # write the video to the pack's csv file
    echo "${provider_name}, ${content_pack}, ${ref_size}, ${video}, ${videoname_lowercase}_video" >> $target_dir/$pack_name.csv
  done
  
  _rename_files_properly "${target_dir}"
  
  # fixing file permissions
  chmod 664 $target_dir/*.*
}

_export_content_packs () {
  for provider in `ls`; do
    if [ -d $provider ] && [ ! -f ".ams_${provider}" ]; then
      # set the renamed providers to their right names (hardcoded)
      case $provider in
        avioesdoforro|forrodomuido) provider_name="ezapsom";;
        bella) provider_name="belladasemana";;
        cesarpolvilho) provider_name="eblasperez";;
        concursosereias) provider_name="sereias";;
        hsm) provider_name="disney";;
        fugu) provider_name="fugumobile";;
        smartcontents) provider_name="sensualclub";;
        taito) provider_name="fatorx";;
        wtn) provider_name="mobbr";;
        *) provider_name="$provider";;
      esac
      
      cd $provider
      colorize "Exporting $mediatype from $provider / $provider_name" 32
      for content_pack in `ls`; do
        if [ -d $content_pack ] && [ ! -f ".ams_${content_pack}" ]; then
          cd $content_pack
          colorize "    generate files using sources found in $CONTENT_SOURCE_DIRECTORY/$mediatype/$provider/$content_pack"
          # choose the function to call
          case $mediatype in
            games) _export_games ;;
            images) _export_images ;;
            songs) _export_songs ;;
            videos) _export_videos ;;
          esac
          cd .. # back to provider root
          colorize "    $mediatype from $provider inside $content_pack exported" 36
          touch ".ams_${content_pack}"
        else
          colorize "  $mediatype from $provider inside $content_pack previously exported" 33
        fi
      done
      cd .. # back to media type root
      colorize "  $mediatype' provider $provider exported" 36
      touch ".ams_$provider"
    else
      colorize "  $mediatype' provider $provider previously exported" 33
    fi
  done
}

cd $CONTENT_SOURCE_DIRECTORY
if [ -n $1 ]; then
  mediatype="$1"
  if [ -d $mediatype ] && [ ! -f ".ams_${mediatype}" ]; then
    cd $mediatype
    _export_content_packs
    cd ..
    touch ".ams_$mediatype"
    colorize "$mediatype exported." 36
  elif [ -d $mediatype ] && [ -f ".ams_${mediatype}" ]; then
    colorize "$mediatype previously exported." 33
  else
    colorize "Bad parameter value, should be games, images, songs or videos." 31
    exit 5
  fi
else
  for mediatype in `ls`; do
    if [ -d $mediatype ] && [ ! -f ".ams_${mediatype}" ]; then
      cd $mediatype
      _export_content_packs
      cd ..
      touch ".ams_$mediatype"
      colorize "$mediatype exported." 36
    else
      colorize "$mediatype previously exported." 33
    fi
  done
fi

exit $?
