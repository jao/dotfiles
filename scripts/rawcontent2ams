#!/bin/bash

# this script takes the raw structure and generates the AMS structure
# followed by yet another script that will generate the necessary XML
# files, with the required information.
# The ruby script is called: amsxmlgenerator

# Basic variables
SCRIPT_NAME=`basename $0`
SCRIPT_DIR=`dirname $0`
source "${SCRIPT_DIR}/_function_colorize"

CONTENT_SOURCE_DIRECTORY="/Volumes/PublicoSP/remoteITcontents/raw_content"
CONTENT_TARGET_DIRECTORY="/Volumes/PublicoSP/remoteITcontents/ams"

DATETIME="201010101010"

_rename_files_properly () {
  cd $1
  for file in `ls`; do
    newfilename=`echo $file | tr "[[:upper:]]" "[[:lower:]]"`
    newfilename="${newfilename//[/}"
    newfilename="${newfilename//]/_}"
    newfilename="${newfilename//(/}"
    newfilename="${newfilename//)/_}"
    newfilename="${newfilename//__/_}"
    if [ "$file" != "$newfilename" ]; then
      mv -v $file $newfilename
    fi
  done
  cd -
}

_rename_files_no_spaces () {
  ls | while read filename; do
    if [ -e "$filename" ] && [ "$filename" != "${filename// /}" ]; then
      mv "$filename" "${filename// /}";
    fi
  done
}

cd $CONTENT_SOURCE_DIRECTORY
for mediatype in `ls`; do
  cd $mediatype
  for provider in `ls`; do
    cd $provider
    for content_pack in `ls`; do
      cd $content_pack
      
      # set the renamed providers to their new names (hardcoded)
      case $provider in
        avioesdoforro|forrodomuido) provider_name="ezapsom";;
        bella) provider_name="belladasemana";;
        cesarpolvilho) provider_name="eblasperez";;
        concursosereias) provider_name="sereias";;
        hsm) provider_name="disney";;
        fugu) provider_name="fugumobile";;
        smartcontents) provider_name="sensualclub";;
        taito) provider_name="fatorx";;
        wtn) provider_name="mobbr";;
        *) provider_name="$provider";;
      esac
      
      case $mediatype in
        games-temp)
          pack_name="${DATETIME}_game_${provider_name}_${content_pack}_insert"
          target_dir="${CONTENT_TARGET_DIRECTORY}/${pack_name}"
          [ ! -d $target_dir ] && mkdir -p $target_dir
          colorize "content pack: $pack_name ($target_dir)" 32
          touch $target_dir/$pack_name.xml
          
          [ -f ICO_WEB.GIF ] && [ ! -f $target_dir/_wap_preview.jpg ] && convert -size 100x100 ICO_WEB.GIF -thumbnail 100x100! $target_dir/_wap_preview.jpg
          [ -f ICO_WEB.GIF ] && [ ! -f $target_dir/_web_preview.jpg ] && convert -size 200x200 ICO_WEB.GIF -thumbnail 200x200! $target_dir/_web_preview.jpg
          
          [ -f INFO.TXT ] && cp -n INFO.TXT $target_dir/info.txt
          [ -f SHORT.TXT ] && cp -n INFO.TXT $target_dir/short.txt
          [ -f LONG.TXT ] && cp -n INFO.TXT $target_dir/long.txt
          
          # java files directory
          [ ! -d $target_dir/files ] && mkdir -p $target_dir/files
          
          _rename_files_no_spaces
          
          regexp="(ALCATEL|AMOI|BENQ|BLACKBERRY|HTC|HUAWEI|KYOCERA|LG|MOTOROLA|NEC|NOKIA|PANASONIC|PANTECH|SAGEM|SAMSUNG|SANYO|SHARP|SIEMENS|SONY.?ERICSSON|TOSHIBA|ZTE)"
          for file in `ls *.JAD | grep -Ei "$regexp"`; do
            new_filename=`echo $file | sed -E "s/${regexp}/\1-/g" | sed -E 's/SONY.ERICSSON/SONYERICSSON/' | sed -E 's/_+/_/g' | sed -E 's/(-+|-_)/-/g' | tr "[[:upper:]]" "[[:lower:]]" | sed -E 's/(_en|_it|jogos?2010[0-9]+|2010[0-9]+)//g'`
            cp -nv "$file" $target_dir/files/${new_filename}
            cp -nv "${file/.JAD/.JAR}" $target_dir/files/${new_filename/.jad/.jar}
          done
          
          # _rename_files_properly "${target_dir}"
          
          # fixing file permissions
          chmod 644 *.*
        ;;
        images)
          pack_name="${DATETIME}_image_${provider_name}_${content_pack}_insert"
          target_dir="${CONTENT_TARGET_DIRECTORY}/${pack_name}"
          [ ! -d $target_dir ] && mkdir -p $target_dir
          colorize "content pack: $pack_name ($target_dir)" 32
          touch $target_dir/$pack_name.xml
          
          for image in `ls | grep -Ei 'jpg$'`; do
            colorize "  exporting $image"
            imagename=${image#*_}
            imagename=${imagename%_SQR*}
            imagename=${imagename%_RET*}
            imagename=${imagename%-SQR*}
            imagename=${imagename%-RET*}
            imagename=${imagename%.*}
            # imagename=${imagename//(/-}
            # imagename=${imagename//)/}
            imagename_lowercase=`echo $imagename | tr "[[:upper:]]" "[[:lower:]]"`
            
            # image resolution
            resolution=`identify $image | awk '{ print $3 }'`
            width=`echo $resolution | awk -Fx '{ print $1 }'`
            height=`echo $resolution | awk -Fx '{ print $2 }'`
            
            # information csv file
            [ ! -f $target_dir/$pack_name.csv ] && echo "provider, content pack, resolution, original filename, new filename" > $target_dir/$pack_name.csv
            echo "${provider_name}, ${content_pack}, ${resolution}, ${image}, ${imagename_lowercase}_image" >> $target_dir/$pack_name.csv
            colorize "    ${provider_name}, ${content_pack}, ${resolution}, ${image}, ${imagename_lowercase}_image"
            
            # ratio information
            # if [ $(($width / 4)) -eq $(($height / 3)) ]; then
            #   ratio_square="-crop ${height}x${height}"
            #   ratio_landscape=""
            #   ratio_portrait="-crop $(( $height / 4 * 3 ))x${height}"
            #   ratio_sky="-crop $(( $height / 16 * 9))x${height}"
            # elif [ $(($width / 3)) -eq $(($height / 4)) ]; then
            #   ratio_square="-crop ${width}x${width}"
            #   ratio_landscape="-crop $(( $width / 4 * 3 ))x${width}"
            #   ratio_portrait=""
            #   ratio_sky="-crop $(( $height / 16 * 9))x${height}"
            # else
            #   ratio_square=""
            #   ratio_landscape="-crop ${width}x$(( $width / 4 * 3 ))"
            #   ratio_portrait="-crop $(( $width / 4 * 3 ))x${width}"
            #   ratio_sky="-crop $(( $width / 16 * 9))x${width}"
            # fi
            
            [ ! -f $target_dir/${imagename_lowercase}_image_1200x1200.jpg ] && convert -gravity center -background white -extent 1200x1200 $image -resize 1200x1200 "$target_dir/${imagename_lowercase}_image_1200x1200.jpg"
            [ ! -f $target_dir/${imagename_lowercase}_image_1200x900.jpg ] && convert -gravity center -background white -extent 1200x900 $image -resize 1200x900 "$target_dir/${imagename_lowercase}_image_1200x900.jpg"
            [ ! -f $target_dir/${imagename_lowercase}_image_900x1200.jpg ] && convert -gravity center -background white -extent 900x1200 $image -resize 900x1200 "$target_dir/${imagename_lowercase}_image_900x1200.jpg"
            [ ! -f $target_dir/${imagename_lowercase}_image_675x1200.jpg ] && convert -gravity center -background white -extent 675x1200 $image -resize 675x1200 "$target_dir/${imagename_lowercase}_image_675x1200.jpg"
          done
          
          _rename_files_properly "${target_dir}"
          
          # fixing file permissions
          chmod 644 *.*
        ;;
        songs-temp)
          pack_name="${DATETIME}_realsound_${provider_name}_${content_pack}_insert"
          target_dir="${CONTENT_TARGET_DIRECTORY}/${pack_name}"
          [ ! -d $target_dir ] && mkdir -p $target_dir
          colorize "content pack: $pack_name ($target_dir)" 32
          touch $target_dir/$pack_name.xml
          
          [ -f ICO_WEB.GIF ] && [ ! -f $target_dir/_wap_preview.jpg ] && convert -size 100x100 ICO_WEB.GIF -thumbnail 100x100! $target_dir/_wap_preview.jpg
          [ -f ICO_WEB.GIF ] && [ ! -f $target_dir/_web_preview.jpg ] && convert -size 200x200 ICO_WEB.GIF -thumbnail 200x200! $target_dir/_web_preview.jpg
          cp -n *.MP3 ${target_dir}/
          rm $target_dir/*_PREVIEW.MP3 2> /dev/null # make sure no errors regarding this are shown
          
          _rename_files_properly "${target_dir}"
          
          # fixing file permissions
          chmod 644 *.*
        ;;
        videos-temp)
          pack_name="${DATETIME}_video_${provider_name}_${content_pack}_insert"
          target_dir="${CONTENT_TARGET_DIRECTORY}/${pack_name}"
          [ ! -d $target_dir ] && mkdir -p $target_dir
          colorize "content pack: $pack_name ($target_dir)" 32
          touch $target_dir/$pack_name.xml
          
          # parameters
          video_options="-b 100k -r 13"
          audio_options="-strict experimental -ab 64k -ar 22050"
          qcomp="-qcomp 0.5" # compression
          
          # sizes
          sizes=('176x144' '352x288')
          
          for video in `ls | grep -Ei '(3gp|mp4)$'`; do
            colorize "  exporting $video"
            ref_size=`echo ${video%%_*} | tr "[[:upper:]]" "[[:lower:]]"`
            ref_width=`echo $ref_size | awk -Fx '{ print $1 }'`
            ref_height=`echo $ref_size | awk -Fx '{ print $2 }'`
            
            videoname="${video%.*}"
            videoname="${videoname#*_}"
            videoname_lowercase=`echo "$videoname" | tr "[[:upper:]]" "[[:lower:]]"`
            
            # information csv file
            [ ! -f $target_dir/$pack_name.csv ] && echo "provider, content pack, resolution, original filename, new filename" > $target_dir/$pack_name.csv
            echo "${provider_name}, ${content_pack}, ${ref_size}, ${video}, ${videoname_lowercase}_video" >> $target_dir/$pack_name.csv
            colorize "    ${provider_name}, ${content_pack}, ${ref_size}, ${video}, ${videoname_lowercase}_video"
            
            preview="ICO_WEB_${videoname}.GIF"
            if [ -f $preview ]; then
              [ ! -f $target_dir/${videoname_lowercase}_video_web_preview.jpg ] && convert -size 200x200 $preview -thumbnail 200x200! $target_dir/${videoname_lowercase}_video_web_preview.jpg
              [ ! -f $target_dir/${videoname_lowercase}_video_wap_preview.jpg ] && convert -size 100x100 $preview -thumbnail 100x100! $target_dir/${videoname_lowercase}_video_wap_preview.jpg
              [ ! -f $target_dir/${videoname_lowercase}_video_cover_600x600.jpg ] && convert -size 600x600 $preview -resize 600x600! $target_dir/${videoname_lowercase}_video_cover_600x600.jpg
            else
              colorize "  missing file $preview" 33
            fi
            # screen capture
            ffmpeg -i $video -f image2 -ss 4 -t 2 -r 1:4 -s 640x480 _${videoname}_640x480_%02d.jpg &> /dev/null
            [ -f _${videoname}_640x480_002.jpg ] && [ ! -f $target_dir/${videoname_lowercase}_video_screen_capture_640x480.jpg ] && convert -size 640x480 _${videoname}_640x480_002.jpg -resize 640x480! $target_dir/${videoname_lowercase}_video_screen_capture_640x480.jpg
            rm _${videoname}_640x480_*.jpg 2> /dev/null # make sure no errors regarding this are shown
            
            for size in ${sizes[@]}; do
              new_width=`echo $size | awk -Fx '{ print $1 }'`
              new_height=`echo $size | awk -Fx '{ print $2 }'`
              
              # aspect ratio calculation
              if [ $(($new_width / 4)) -eq $(($new_height / 3)) ]; then
                aspect_param="-aspect 4:3"
              elif [ $(($new_width / 3)) -eq $(($new_height / 2)) ]; then
                aspect_param="-aspect 3:2"
              elif [ $(($new_width / 16)) -eq $(($new_height / 9)) ]; then
                aspect_param="-aspect 16:9"
              elif [ $(($new_width / 11)) -eq $(($new_height / 9)) ]; then
                aspect_param="-aspect 11:9"
              else
                aspect_param=""
              fi
              
              # mpeg4 aac 3gp
              new_video_mpeg4_aac_3gp="${target_dir}/${videoname_lowercase}_video_mpeg4_aac_${size}.3gp"
              if [ ! -f "$new_video_mpeg4_aac_3gp" ]; then
                colorize "    mpeg4 aac 3gp :: $video => $new_video_mpeg4_aac_3gp" 36
                colorize "      ffmpeg -i $video -f 3gp -vcodec mpeg4 $video_options -acodec aac $audio_options -s $size $aspect_param $qcomp -y $new_video_mpeg4_aac_3gp"
                ffmpeg -i $video -f 3gp -vcodec mpeg4 $video_options -acodec aac $audio_options -s $size $aspect_param $qcomp -y $new_video_mpeg4_aac_3gp 2>&1 | grep -Ei '(damaged|error|problem|failed)'
              fi
              
              # h263 aac 3gp
              new_video_h263_aac_3gp="${target_dir}/${videoname_lowercase}_video_h263_aac_${size}.3gp"
              if [ ! -f "$new_video_h263_aac_3gp" ]; then
                colorize "    h263 aac 3gp :: $video => $new_video_h263_aac_3gp" 36
                colorize "      ffmpeg -i $video -f 3gp -vcodec h263 $video_options -acodec aac $audio_options -s $size $aspect_param $qcomp -y $new_video_h263_aac_3gp"
                ffmpeg -i $video -f 3gp -vcodec h263 $video_options -acodec aac $audio_options -s $size $aspect_param $qcomp -y $new_video_h263_aac_3gp 2>&1 | grep -Ei '(damaged|error|problem|failed)'
              fi
            done
            
          done
          
          _rename_files_properly "${target_dir}"
          
          # fixing file permissions
          chmod 644 *.*
        ;;
      esac
      cd ..
    done
    cd ..
  done
  cd ..
done

exit $?
