#!/bin/bash
# 
# wms to raw content:
# this script is meant to copy the main files from the italian content format
# to a new structure that will be used to create the AMS XML files to import
# the contents into the german platorm.
# 
# There will be another script to generate the XML files, filling all the
# available information. And the script will be called "rawcontent2ams"
# 

# Basic variables
SCRIPT_NAME=`basename $0`
SCRIPT_DIR=`dirname $0`
source "${SCRIPT_DIR}/_function_colorize"

CONTENT_SOURCE_DIRECTORY="/Volumes/PublicoSP/remoteITcontents/remote"
CONTENT_TARGET_DIRECTORY="/Volumes/PublicoSP/remoteITcontents/raw_content"

# content measuring functions
_get_image_size () {
  width=0
  height=0
  if [ -f "$1" ]; then
    local img_info=`identify "$1" 2>&1 | head -n 1`
    local bad_header=`echo "${img_info}" | grep -o 'improper image header'`
    if [ "${bad_header}" == "improper image header" ]; then
      colorize "  => ${bad_header}  " 37 41 1
      colorize "  YOU SHOULD REMOVE THIS FILE -> ${1}" 31
      return
    fi
    local resolution=`echo "${img_info}" | awk '{ print $3 }'`
    width=`echo "${resolution}" | awk -Fx '{ print $1 }'`
    height=`echo "${resolution}" | awk -Fx '{ print $2 }'`
  fi
}

_find_source_image () {
  ref_width=0
  ref_height=0
  source_image=''
  for img in `ls | grep -Ei "${1}"`; do
    _get_image_size "${img//\\/}"
    if [ "${width}" -ge $ref_width ] && [ "${height}" -ge $ref_height ]; then
      ref_width=$width
      ref_height=$height
      source_image="$img"
    fi
  done
  if [ -n $source_image ] && [ $ref_width -gt 0 ] && [ $ref_height -gt 0 ]; then
    colorize "      found ${source_image} | ${ref_width}x${ref_height}"
  fi
}

# script starts here

# go to the content's source directory
cd "${CONTENT_SOURCE_DIRECTORY}"
for content_dir in `ls`; do
  if [ -d "${content_dir}" ]; then
    cd "${content_dir}"
    case $content_dir in
      games)
        # copy the TXT files, IMG files, and JAVA files to a simpler file structure
        banner "Copying game files"
        colorize "$msg" 37 44
        
        for dir in `ls`; do
          if [ -d "${dir}" ]; then
            colorize "  working with files in ${dir}" 36
            
            provider="${dir##*_}"
            if [ -z "${provider}" ]; then
              colorize "    Could not find the provider's name" 31
              exit 1
            fi
            provider_name=`echo "${provider}" | tr "[[:upper:]]" "[[:lower:]]"`
            
            game="${dir%_*}"
            game="${game%jogo*}"
            game="${game%Jogo*}"
            game="${game%JOGO*}"
            game_name=`echo "${game}" | tr "[[:upper:]]" "[[:lower:]]"`
            
            target_dir="${CONTENT_TARGET_DIRECTORY}/games/${provider_name}/${game_name}"
            [ ! -d "${target_dir}" ] && mkdir -p "${target_dir}"
            colorize "    target directory is ${target_dir}"
            
            cd "${dir}"
            files_in_target_dir=`ls "${target_dir}/" 2>&1 | wc -w | sed 's/ //g'`
            if [ "$files_in_target_dir" -eq 0 ]; then
              colorize "    copying game files from ${dir}" 34
              cp -nv IMG/*.GIF "${target_dir}/"
              cp -nv TXT/*.TXT "${target_dir}/"
              cp -nv FILES/*/*.JA* "${target_dir}/"
            else
              colorize "      There are files in ${target_dir} already, please fix this and try again." 35
              # exit 1
            fi
            cd ..
            
          fi
        done
        
        colorize "Game files copied." 32
      ;;
      images)
        # copy only the larger resolution image files to a simpler file structure
        banner "Copying image files"
        colorize "$msg" 37 44
        
        for dir in `ls`; do
          if [ -d "${dir}" ]; then
            colorize "  working with files inside ${dir}" 36
            
            provider="${dir##*_}"
            if [ -z "${provider}" ]; then
              colorize "    Could not find the provider's name" 31
              exit 1
            fi
            provider_name=`echo "${provider}" | tr "[[:upper:]]" "[[:lower:]]"`
            image_pack="${dir%%WALLPAPER*}"
            image_pack="${image_pack%%IMAGE*}"
            image_pack="${image_pack%%2010*}"
            image_pack="${image_pack%%2009*}"
            image_pack="${image_pack/_$provider/}"
            image_pack=`echo "${image_pack}" | tr "[[:upper:]]" "[[:lower:]]"`
            
            colorize "    image pack name: ${image_pack}" 32
            
            target_dir="${CONTENT_TARGET_DIRECTORY}/images/${provider_name}/${image_pack}"
            [ ! -d "${target_dir}" ] && mkdir -p "${target_dir}"
            colorize "    target directory is ${target_dir}"
            
            cd "${dir}"
            # find the name patterns inside this directory
            image_names=(`ls | grep -Ei '\.(jpg|gif)$' | sed -E 's/^[0-9]+X[0-9]+_([^\.]+)\.(JPG|GIF)$/\1/g' | grep -v '_PREVIEW' | grep -v 'ICO_' | grep -Eiv '(JPG|GIF)$' | sort -u`)
            if [ ${#image_names[@]} -gt 0 ]; then
              colorize "    Found ${#image_names[@]} different name pattern(s)"
              for image_name in ${image_names[@]}; do
                colorize "    working with '${image_name}' pattern..." 33
                image_name="${image_name//\(/\(}"
                image_name="${image_name//\)/\)}"
                image_name="${image_name//[/\[}"
                image_name="${image_name//]/\]}"
                
                # find the larger resolution image available that follows that name pattern
                _find_source_image "^[0-9]+X[0-9]+_${image_name}\.(JPG|GIF)$"
                if [ -n "${source_image}" ] && [ -f "${source_image}" ] && [ ! -f "${target_dir}/${source_image}" ]; then
                  extension=`identify "${source_image}" | awk '{ print $2 }' | tr "[[:upper:]]" "[[:lower:]]" | sed 's/e//g'`
                  name_extension=`echo "${souce_image##*.}" | tr "[[:upper:]]" "[[:lower:]]"`
                  
                  # copy it to the target directory
                  colorize "      copying image ${source_image} from ${content_dir}/${dir}" 34
                  if [ "$name_extension" != "$extension" ] && [ "$extension" == "jpg" ]; then
                    cp -nv "${source_image}" "${target_dir}/${source_image%.*}.JPG"
                  elif [ "$extension" != "jpg" ]; then
                    convert "${source_image}" "${source_image%.*}.JPG"
                    cp -nv "${source_image%.*}.JPG" "${target_dir}/"
                  else
                    cp -nv "${source_image}" "${target_dir}/"
                  fi
                elif [ -f "${target_dir}/${source_image}" ]; then
                  colorize "      '${target_dir}/${source_image}' already exists, skipping it." 34
                else
                  colorize "      Something prevented '${source_image}' to be copied, please fix this and try again." 35
                fi
              done
            fi
            cd ..
          fi
        done
        
        colorize "Image files copied." 32
      ;;
      songs)
        # copy the sound files to a simpler file structure
        banner "Copying song files"
        colorize "$msg" 37 44
        
        for dir in `ls`; do
          if [ -d "${dir}" ]; then
            colorize "  working with files inside ${dir}" 36
            
            provider="${dir##*_}"
            if [ -z "${provider}" ]; then
              colorize "    Could not find the provider's name" 31
              exit 1
            fi
            provider_name=`echo "${provider}" | tr "[[:upper:]]" "[[:lower:]]"`
            
            cd "${dir}"
            if [ -d "REAL" ]; then
              song_name="${dir%%TRUETONE*}"
              song_name="${dir%%CRAZYTONE*}"
              song_name="${dir%%2010*}"
              song_name="${song_name%%2009*}"
              song_name="${song_name/_$provider/}"
              song_name=`echo "${song_name}" | tr "[[:upper:]]" "[[:lower:]]"`
              
              target_dir="${CONTENT_TARGET_DIRECTORY}/songs/${provider_name}/${song_name}"
              [ ! -d "${target_dir}" ] && mkdir -p "${target_dir}"
              colorize "    target directory is ${target_dir}"
              
              files_in_target_dir=`ls "${target_dir}/" 2>&1 | wc -w | sed 's/ //g'`
              if [ "${files_in_target_dir}" -eq 0 ]; then
                colorize "    copying song files from ${dir}" 34
                cp -nv *.* "${target_dir}/"
                cp -nv REAL/*.* "${target_dir}/"
              else
                colorize "      There are files in ${target_dir} already, please fix this and try again." 35
              fi
            else
              for songpack in `ls`; do
                if [ -d ${songpack} ] && [ -d "${songpack}/REAL" ]; then
                  if [ "$songpack" == "$dir" ]; then
                    song_name="${dir%%TRUETONE*}"
                    song_name="${dir%%CRAZYTONE*}"
                    song_name="${dir%%2010*}"
                    song_name="${song_name%%2009*}"
                    song_name="${song_name/_$provider/}"
                    song_name=`echo "${song_name}" | tr "[[:upper:]]" "[[:lower:]]"`
                  else
                    song_name=`echo "${songpack}" | tr "[[:upper:]]" "[[:lower:]]"`
                  fi
                  
                  target_dir="${CONTENT_TARGET_DIRECTORY}/songs/${provider_name}/${song_name}"
                  [ ! -d "${target_dir}" ] && mkdir -p "${target_dir}"
                  colorize "    target directory is ${target_dir}"
                  
                  cd "${songpack}"
                  files_in_target_dir=`ls "${target_dir}/" 2>&1 | wc -w | sed 's/ //g'`
                  if [ "${files_in_target_dir}" -eq 0 ]; then
                    colorize "    copying song files from ${songpack}" 34
                    cp -nv *.* "${target_dir}/"
                    cp -nv REAL/*.* "${target_dir}/"
                  else
                    colorize "      There are files in ${target_dir} already, please fix this and try again." 35
                  fi
                  cd ..
                else
                  extension="${songpack##*.}"
                  if [ "${extension}" != "GIF" ]; then
                    song_name=`echo "${songpack%%.*}" | tr "[[:upper:]]" "[[:lower:]]"`
                    target_dir="${CONTENT_TARGET_DIRECTORY}/songs/${provider_name}/${song_name}"
                    [ ! -d "${target_dir}" ] && mkdir -p "${target_dir}"
                    colorize "      target directory is ${target_dir}"
                    cp -nv "${songpack}" "${target_dir}/"
                  else
                    colorize "      song pack '${songpack}' is in the wrong format." 35
                  fi
                fi
              done
            fi
            cd ..
            
          fi
        done
        
        colorize "Song files copied." 32
      ;;
      videos)
        # copy the larger resolution video files to a simpler file structure
        banner "Copying video files"
        colorize "$msg" 37 44
        
        for dir in `ls`; do
          if [ -d "${dir}" ]; then
            colorize "  working with files inside ${dir}" 36
            
            provider="${dir##*_}"
            if [ -z "${provider}" ]; then
              colorize "    Could not find the provider's name" 31
              exit 1
            fi
            provider_name=`echo "${provider}" | tr "[[:upper:]]" "[[:lower:]]"`
            
            cd "${dir}"
            # find the name patterns inside this directory
            video_names=(`ls | grep -Ei '(mp4|3gp)$' | sed -E 's/^[0-9]+X[0-9]+_([^\.]+)\.(MP4|3GP)$/\1/g' | grep -Eiv '(mp4|3gp)$' | sort -u`)
            if [ ${#video_names[@]} -gt 0 ]; then
              colorize "    found ${#video_names[@]} different name pattern(s)"
              for videoname in ${video_names[@]}; do
                colorize "    working with '${videoname}' pattern..." 33
                # find the larger resolution video available that follows that name pattern
                ref_width=128
                ref_height=96
                source_video=''
                videoname="${videoname//[/}"
                videoname="${videoname//]/}"
                for videofile in `ls *${videoname}* | grep -Ei '(mp4|3gp)$' 2> /dev/null`; do
                  res=`ffmpeg -i $videofile 2>&1 | grep -oEi ' [0-9]{3}x[0-9]{2,3}' | sed 's/ //g'`
                  # res="${videofile%%_*}"
                  if [ -n "${res}" ]; then
                    width=`echo "$res" | awk -Fx '{ print $1 }'`
                    height=`echo "$res" | awk -Fx '{ print $2 }'`
                    
                    if [ "$width" -ge $ref_width ] && [ "$height" -ge $ref_height ]; then
                      source_video="${videofile}"
                      ref_width=$width
                      ref_height=$height
                    fi
                  fi
                done
                
                video_pack="${dir%%VIDEO*}"
                video_pack="${video_pack%%2010*}"
                video_pack="${video_pack%%2009*}"
                video_pack="${video_pack/_$provider/}"
                video_pack="${video_pack/$provider/}"
                video_pack="${video_pack//[/}"
                video_pack="${video_pack//]/}"
                video_pack=`echo "${video_pack}" | tr "[[:upper:]]" "[[:lower:]]"`
                
                if [ -n "${video_pack}" ]; then
                  colorize "    video pack name: ${video_pack}" 32
                  target_dir="${CONTENT_TARGET_DIRECTORY}/videos/${provider_name}/${video_pack}"
                else
                  video_pack_tmp="${source_video#*_}"
                  video_pack_tmp="${video_pack_tmp%.*}"
                  video_pack_tmp="${video_pack_tmp//[/}"
                  video_pack_tmp="${video_pack_tmp//]/}"
                  video_pack_tmp=`echo "${video_pack_tmp}" | tr "[[:upper:]]" "[[:lower:]]"`
                  colorize "    video pack name: ${video_pack_tmp}" 32
                  target_dir="${CONTENT_TARGET_DIRECTORY}/videos/${provider_name}/${video_pack_tmp}"
                fi
                [ ! -d "${target_dir}" ] && mkdir -p "${target_dir}"
                colorize "    target directory is ${target_dir}"
                
                if [ -n "${source_video}" ] && [ -f "${source_video}" ] && [ ! -f "${target_dir}/${source_video}" ]; then
                  colorize "    copying ${source_video} from ${dir} to ${target_dir}" 34
                  # copy it to the target directory
                  cp -nv "${source_video%.*}".* "${target_dir}/"
                  
                  # copy the images relate to this video
                  cp -nv ICO_*"${videoname}"* "${target_dir}/" 2> /dev/null
                elif [ -f "${target_dir}/${source_video}" ]; then
                  colorize "      '${target_dir}/${source_video}' already exists, skipping it." 35
                else
                  colorize "      Something prevented '${source_video}' to be copied, please fix this and try again." 35
                fi
              done
            fi
            cd ..
          fi
        done
        
        colorize "Video files copied." 32
      ;;
    esac
    cd ..
  fi
done

exit $?
