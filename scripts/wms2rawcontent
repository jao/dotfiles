#!/bin/bash
# 
# wms to raw content:
# this script is meant to copy the main files from the italian content format
# to a new structure that will be used to create the AMS XML files to import
# the contents into the german platorm.
# 
# There will be another script to generate the XML files, filling all the
# available information. And the script will be called "rawcontent2ams"
# 

# Basic variables
SCRIPT_NAME=`basename $0`
SCRIPT_DIR=`dirname $0`
source "${SCRIPT_DIR}/_function_colorize"

CONTENT_SOURCE_DIRECTORY="/Volumes/PublicoSP/remoteITcontents/remote"
CONTENT_TARGET_DIRECTORY="/Volumes/PublicoSP/remoteITcontents/raw_content"

# content measuring functions
_get_image_size () {
  width=0
  height=0
  if [ -f "$1" ]; then
    local img_info=`identify "$1" 2>&1 | head -n 1`
    local bad_header=`echo "${img_info}" | grep -o 'improper image header'`
    if [ "${bad_header}" == "improper image header" ]; then
      colorize "  => ${bad_header}  " 37 41 1
      colorize "  YOU SHOULD REMOVE THIS FILE -> ${1}" 31
      return
    fi
    local resolution=`echo "${img_info}" | awk '{ print $3 }'`
    width=`echo "${resolution}" | awk -Fx '{ print $1 }'`
    height=`echo "${resolution}" | awk -Fx '{ print $2 }'`
  fi
}

_find_source_image () {
  ref_width=0
  ref_height=0
  source_image=''
  for img in `ls | grep -Ei "${1}"`; do
    _get_image_size "${img//\\/}"
    if [ "${width}" -ge $ref_width ] && [ "${height}" -ge $ref_height ]; then
      ref_width=$width
      ref_height=$height
      source_image="$img"
    fi
  done
  if [ -n $source_image ] && [ $ref_width -gt 0 ] && [ $ref_height -gt 0 ]; then
    colorize "    Found ${source_image} | ${ref_width}x${ref_height}" 36
  fi
}

# script starts here

# go to the content's source directory
cd "${CONTENT_SOURCE_DIRECTORY}"
for content_dir in `ls`; do
  if [ -d "${content_dir}" ]; then
    cd "${content_dir}"
    case $content_dir in
      games)
        # copy the TXT files, IMG files, and JAVA files to a simpler file structure
        banner "Copying game files"
        colorize "$msg" 37 44
        
        for dir in `ls`; do
          if [ -d "${dir}" ]; then
            colorize "  working with files in ${dir}" 36
            
            provider="${dir##*_}"
            if [ -z "${provider}" ]; then
              colorize "    Could not find the provider's name" 31
              exit 1
            fi
            provider_name=`echo "${provider}" | tr "[[:upper:]]" "[[:lower:]]"`
            
            game="${dir%_*}"
            game="${game%jogo*}"
            game="${game%Jogo*}"
            game="${game%JOGO*}"
            game_name=`echo "${game}" | tr "[[:upper:]]" "[[:lower:]]"`
            
            target_dir="${CONTENT_TARGET_DIRECTORY}/games/${provider_name}/${game_name}"
            [ ! -d "${target_dir}" ] && mkdir -p "${target_dir}"
            colorize "    target directory is ${target_dir}"
            
            cd "${dir}"
            files_in_target_dir=`ls "${target_dir}/" 2> /dev/null | wc -w | sed 's/ //g'`
            if [ "$files_in_target_dir" -eq 0 ]; then
              colorize "    copying game files from ${dir}"
              cp -nv IMG/*.GIF "${target_dir}/"
              cp -nv TXT/*.TXT "${target_dir}/"
              cp -nv FILES/*/*.JA* "${target_dir}/"
            else
              colorize "      There are files in ${target_dir} already, please fix this" 35
              # exit 1
            fi
            cd ..
            
          fi
        done
        
        colorize "Game files copied." 32
      ;;
      images)
        # copy only the larger resolution image files to a simpler file structure
        banner "Copying image files"
        colorize "$msg" 37 44
        
        for dir in `ls`; do
          if [ -d "${dir}" ]; then
            colorize "  working with files inside ${dir}" 36
            
            provider="${dir##*_}"
            if [ -z "${provider}" ]; then
              colorize "    Could not find the provider's name" 31
              exit 1
            fi
            provider_name=`echo "${provider}" | tr "[[:upper:]]" "[[:lower:]]"`
            
            target_dir="${CONTENT_TARGET_DIRECTORY}/images/${provider_name}"
            [ ! -d "${target_dir}" ] && mkdir -p "${target_dir}"
            colorize "    target directory is ${target_dir}"
            
            cd "${dir}"
            # find the name patterns inside this directory
            image_names=(`ls | grep -Ei '(jpg|gif)$' | sed -E 's/^[0-9]+X[0-9]+_([^\.]+)(_PREVIEW)?\.(JPG|GIF)$/\1/g' | grep -v '_PREVIEW' | sort -u`)
            if [ ${#image_names[@]} -gt 0 ]; then
              colorize "    Found ${#image_names[@]} different name pattern(s)"
              for image_name in ${image_names[@]}; do
                image_name="${image_name//\(/\(}"
                image_name="${image_name//\)/\)}"
                image_name="${image_name//\[/\[}"
                image_name="${image_name//\]/\]}"
                
                # find the larger resolution image available that follows that name pattern
                _find_source_image "^[0-9]+X[0-9]+_${image_name}(_PREVIEW)?\.(JPG|GIF)$"
                if [ -n "${source_image}" ] && [ -f "${source_image}" ] && [ ! -f "${target_dir}/${source_image}"]; then
                  extension=`identify "${source_image}" | awk '{ print $2 }' | tr "[:upper:]" "[:lower:]" | sed 's/e//g'`
                  name_extension=`echo "${souce_image##*.}" | tr "[:upper:]" "[:lower:]"`
                  # copy it to the target directory
                  colorize "    copying image ${source_image} from ${dir}"
                  if [ $name_extension != $extension ] && [ $extension == "jpg" ]; then
                    cp -nv "${source_image}" "${target_dir}/${source_image%.*}.jpg"
                  elif [ $extension != "jpg" ]; then
                    convert "${source_image}" "${source_image%.*}.jpg"
                    cp -nv "${source_image%.*}.jpg" "${target_dir}/"
                  else
                    cp -nv "${source_image}" "${target_dir}/"
                  fi
                else
                  colorize "      Something prevented '${source_image}' to be copied, please fix this and try again."
                fi
              done
            fi
            cd ..
          fi
        done
        
        colorize "Image files copied." 32
      ;;
      songs)
        # copy the sound files to a simpler file structure
        banner "Copying song files"
        colorize "$msg" 37 44
        
        for dir in `ls`; do
          if [ -d "${dir}" ]; then
            colorize "  working with files inside ${dir}" 36
            
            provider="${dir##*_}"
            if [ -z "${provider}" ]; then
              colorize "    Could not find the provider's name" 31
              exit 1
            fi
            provider_name=`echo "${provider}" | tr "[[:upper:]]" "[[:lower:]]"`
            
            cd "${dir}"
            for songpack in `ls`; do
              song_name=`echo "${songpack}" | tr "[[:upper:]]" "[[:lower:]]"`
              
              target_dir="${CONTENT_TARGET_DIRECTORY}/songs/${provider_name}/${song_name}"
              [ ! -d "${target_dir}" ] && mkdir -p "${target_dir}"
              colorize "    target directory is ${target_dir}"
              
              cd "${songpack}"
              files_in_target_dir=`ls | wc -w | sed 's/ //g'`
              if [ "${files_in_target_dir}" -eq 0 ]; then
                colorize "    copying song files from ${songpack}"
                cp -nv *.* "${target_dir}/"
                cp -nv REAL/*.* "${target_dir}/"
              else
                colorize "      There are files in ${target_dir} already, please fix this" 35
              fi
              cd ..
            done
            cd ..
            
          fi
        done
        
        colorize "Song files copied." 32
      ;;
      videos)
        # copy the larger resolution video files to a simpler file structure
        banner "Copying video files"
        colorize "$msg" 37 44
        
        for dir in `ls`; do
          if [ -d "${dir}" ]; then
            colorize "  working with files inside ${dir}" 36
            
            provider="${dir##*_}"
            if [ -z "${provider}" ]; then
              colorize "    Could not find the provider's name" 31
              exit 1
            fi
            provider_name=`echo "${provider}" | tr "[[:upper:]]" "[[:lower:]]"`
            
            target_dir="${CONTENT_TARGET_DIRECTORY}/videos/${provider_name}"
            [ ! -d "${target_dir}" ] && mkdir -p "${target_dir}"
            colorize "    target directory is ${target_dir}"
            
            cd "${dir}"
            # find the name patterns inside this directory
            video_names=(`ls | grep -Ei '(mp4|3gp)$' | sed -E 's/^[0-9]+x[0-9]+_(\[?[[:alnum:]\_]+\]?)\.[[:alnum:]]{3}$/\1/g' | grep -Eiv '(mp4|3gp)$' | sort -u`)
            if [ ${#video_names[@]} -gt 0 ]; then
              colorize "    found ${#video_names[@]} different name pattern(s)"
              for videoname in ${video_names[@]}; do
                # find the larger resolution video available that follows that name pattern
                ref_width=128
                ref_height=96
                source_video=''
                for videofile in `ls *_${videoname}.* | grep -Ei "(mp4|3gp)$" 2> /dev/null`; do
                  res=`ffmpeg -i $videofile 2>&1 | grep -oE ' [0-9]{3}x[0-9]{2,3}' | sed 's/ //'`
                  # res="${videofile%%_*}"
                  if [ -n "${res}" ]; then
                    width=`echo "$res" | awk -Fx '{ print $1 }'`
                    height=`echo "$res" | awk -Fx '{ print $2 }'`
                    
                    if [ "$width" -ge $ref_width ] && [ "$height" -ge $ref_height ]; then
                      source_video="${videofile}"
                      ref_width=$width
                      ref_height=$height
                    fi
                  fi
                done
                
                if [ -n "${source_video}" ] && [ -f "${source_video}" ] && [ ! -f "${target_dir}/${source_video}" ]; then
                  colorize "    copying ${source_video} from ${dir} to ${target_dir}" 36
                  # copy it to the target directory
                  cp -nv ${source_video%.*}.* "${target_dir}/"
                  
                  # copy videos with 176x144 resolution to the target dir as well
                  cp -nv 176X144_${videoname}* "${target_dir}/" 2> /dev/null
                else
                  colorize "      Something prevented '${source_video}' to be copied, please fix this and try again."
                fi
              done
            fi
            cd ..
          fi
        done
        
        colorize "Video files copied." 32
      ;;
    esac
    cd ..
  fi
done

exit $?
