set nocompatible
filetype off
filetype plugin indent off

" VUNDLE {{{
let s:bundle_path=$HOME."/.vim/bundle/"
execute "set rtp+=".s:bundle_path."vundle/"
call vundle#rc()

Bundle 'gmarik/vundle'
" }}}

" CSApprox
" Bundle 'CSApprox'

" CtrlP
Bundle 'kien/ctrlp.vim'

" Programming {{{
Bundle "rails.vim"
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-rails'
Bundle 'thoughtbot/vim-rspec'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-markdown'
Bundle 'wavded/vim-stylus'
Bundle 'tpope/vim-dispatch'
" frontend
Bundle "jQuery"
Bundle 'burnettk/vim-angular'
Bundle 'matthias-guenther/hammer.vim'

Bundle "mileszs/ack.vim"
nnoremap <leader>a :Ack!<space>

Bundle 'matthias-guenther/hammer.vim'
nmap <leader>p :Hammer<cr>
" }}}

Bundle 'tsaleh/vim-align'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-speeddating'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'maxbrunsfeld/vim-yankstack'
Bundle 'tpope/vim-eunuch'
Bundle 'ngmy/vim-rubocop'

Bundle 'scrooloose/nerdtree'
nmap <C-i> :NERDTreeToggle<CR>
" Disable the scrollbars (NERDTree)
set guioptions-=r
set guioptions-=L

Bundle 'kana/vim-textobj-user'
Bundle 'vim-scripts/YankRing.vim'
let g:yankring_replace_n_pkey = '<leader>['
let g:yankring_replace_n_nkey = '<leader>]'
let g:yankring_history_dir = '~/.vim/tmp'
nmap <leader>y :YRShow<cr>

Bundle 'michaeljsmith/vim-indent-object'
let g:indentobject_meaningful_indentation = ["haml", "sass", "python", "yaml", "markdown"]

Bundle 'Spaceghost/vim-matchit'
Bundle 'kien/ctrlp.vim'
let g:ctrlp_working_path_mode = ''

Bundle 'vim-scripts/scratch.vim'

Bundle 'troydm/easybuffer.vim'
nmap <leader>be :EasyBufferToggle<enter>

Bundle 'terryma/vim-multiple-cursors'

Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-rails'
Bundle 'skwp/vim-rspec'
Bundle 'tpope/vim-rake'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'othree/html5.vim'
Bundle 'scrooloose/syntastic'
Bundle 'Valloric/YouCompleteMe'

autocmd FileType ruby,eruby,yaml set tw=80 ai sw=2 sts=2 et
autocmd FileType ruby,eruby,yaml setlocal foldmethod=manual
autocmd User Rails set tabstop=2 shiftwidth=2 softtabstop=2 expandtab

Bundle 'klen/python-mode'
Bundle 'python.vim'
Bundle 'python_match.vim'
Bundle 'pythoncomplete'

Bundle 'tpope/vim-haml'
Bundle 'juvenn/mustache.vim'
Bundle 'tpope/vim-markdown'
Bundle 'digitaltoad/vim-jade'
Bundle 'slim-template/vim-slim'

au BufNewFile,BufReadPost *.jade setl shiftwidth=2 tabstop=2 softtabstop=2 expandtab
au BufNewFile,BufReadPost *.html setl shiftwidth=2 tabstop=2 softtabstop=2 expandtab
au BufNewFile,BufReadPost *.slim setl shiftwidth=2 tabstop=2 softtabstop=2 expandtab

Bundle 'wavded/vim-stylus'
Bundle 'lunaru/vim-less'
nnoremap ,m :w <BAR> !lessc % > %:t:r.css<CR><space>

Bundle 'kchmck/vim-coffee-script'
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 tabstop=2 softtabstop=2 expandtab

Bundle 'alfredodeza/jacinto.vim'
au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
au BufNewFile,BufReadPost *.coffee setl tabstop=2 softtabstop=2 shiftwidth=2 expandtab

" Go
Bundle 'jnwhiteh/vim-golang'
Bundle 'Blackrush/vim-gocode'
au BufRead,BufNewFile *.go setl filetype=go expandtab tabstop=2 softtabstop=2 shiftwidth=2

" Gist.vim
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
let g:gist_detect_filetype = 1 " autodetect gist filetype
let g:gist_open_browser_after_post = 1 " open browser after create a gist
let g:gist_post_private = 1 " create private gist by default

" fugitive.vim
Bundle 'tpope/vim-fugitive'

Bundle 'tpope/vim-endwise'

Bundle 'airblade/vim-gitgutter'

" Snipmate
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "honza/vim-snippets"

" Snippets
Bundle "gmarik/snipmate.vim"

Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'

Bundle 'scrooloose/nerdtree'

Bundle 'troydm/easybuffer.vim'

" Fancy
Bundle 'bling/vim-airline'
Bundle 'powerline/fonts'
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_branch_prefix = ''
let g:airline#extensions#tabline#enabled = 1

" Bundle 'Yggdroot/indentLine'
" set list lcs=tab:\|\
" let g:indentLine_color_term = 111
" let g:indentLine_color_gui = '#DADADA'
" let g:indentLine_char = 'c'
" "let g:indentLine_char = '∙▹¦'
" let g:indentLine_char = '∙'

Bundle 'majutsushi/tagbar'
nmap <leader>t :TagbarToggle<CR>

Bundle 'gregsexton/gitv'

Bundle 'scrooloose/nerdcommenter'
nmap <leader># :call NERDComment(0, "invert")<cr>
vmap <leader># :call NERDComment(0, "invert")<cr>

" - Bundle 'msanders/snipmate.vim'
Bundle 'sjl/splice.vim'

nmap <leader>g :Ggrep
" ,f for global git serach for word under the cursor (with highlight)
nmap <leader>f :let @/="\\<<C-R><C-W>\\>"<CR>:set hls<CR>:silent Ggrep -w "<C-R><C-W>"<CR>:ccl<CR>:cw<CR><CR>
" same in visual mode
:vmap <leader>f y:let @/=escape(@", '\\[]$^*.')<CR>:set hls<CR>:silent Ggrep -F "<C-R>=escape(@", '\\"#')<CR>"<CR>:ccl<CR>:cw<CR><CR>

Bundle 'scrooloose/syntastic'
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': ['ruby'], 'passive_filetypes': ['html', 'css', 'slim'] }

" --

Bundle 'vim-scripts/Reindent'

autocmd FileType gitcommit set tw=68 spell
autocmd FileType gitcommit setlocal foldmethod=manual

" Ack
Bundle "mileszs/ack.vim"
nnoremap <leader>a :Ack!<space>
noremap <LocalLeader># "ayiw:Ack <C-r>a<CR>
vnoremap <LocalLeader># "ay:Ack <C-r>a<CR>

" DelimitMate
Bundle "raimondi/delimitmate"

" SuperTab
Bundle "ervandew/supertab"

" Command-T
Bundle "wincent/command-t.git"
let g:CommandTMatchWindowAtTop=1 " show window at top


" Navigation
Bundle "gmarik/vim-visual-star-search"

Bundle 'nathanaelkane/vim-indent-guides'
set ts=2 sw=2 et
let g:indent_guides_start_level=1

" Colors
Bundle 'sjl/badwolf'
Bundle 'altercation/vim-colors-solarized'
Bundle 'tomasr/molokai'
Bundle 'zaiste/Atom'
Bundle 'w0ng/vim-hybrid'

Bundle 'zaiste/tmux.vim'
Bundle 'benmills/vimux'
map <Leader>rp :VimuxPromptCommand<CR>
map <Leader>rl :VimuxRunLastCommand<CR>

map <LocalLeader>d :call VimuxRunCommand(@v, 0)<CR>

" --

" VIM setup
" =========

set mouse=a                 " Automatically enable mouse usage
set mousehide               " Hide the mouse cursor while typing

set splitbelow
set splitright

set laststatus=2 " always show the status line

set guifont=Monaco:h12,Andale\ Mono\ Regular:h16,Menlo\ Regular:h15,Consolas\ Regular:h16,Courier\ New\ Regular:h18
set wrap " quebra de linhas

set lines=120
set columns=120

set encoding=utf-8

set number " show line numbers
set showmode " show current mode on status line
set showcmd " show commands on status line
set nowrap " disable automatic word wrapping
set ruler
set showmatch

set history=300 " number of commands saved in the history list
set undolevels=300 " number of undo levels

set backup " turn on backup
set backupdir=~/.vim/tmp " the directory where the swap/backup files should be stored
set dir=~/.vim/tmp
set swapfile

set title " show the current filename on the window title
set backspace=eol,start,indent " allow backspacing over everything in insert mode

set ruler " show the cursor position on status line

set hidden " allow Vim to manage multiple buffers effectively

set tabstop=2 " default tab size
set shiftwidth=2
set expandtab " convert tabs to spaces
set autoindent " self explanatory, huh? (like the most of commands hehe)
set smartindent
set pastetoggle=<f5>

set list
"set listchars=tab:▷⋅,trail:⋅,nbsp:⋅ " show tabs and trailing spaces

set t_Co=256 " the term has 256 colors

set smartcase
set hlsearch " highlight search
set incsearch " show matches while typing

" go vim stuff
set rtp+=$GOROOT/misc/vim
autocmd BufWritePost *.go :silent Fmt

" turn on filetype and syntax
filetype plugin indent on
filetype on
syntax on
colorscheme twilight " the color scheme (srsly)
set background=dark

"Trailing Space Remove
autocmd BufWritePre * :%s/\s\+$//e

" ****************************************************************
" LANGUAGUE INDENT CONFIGURATION
" ****************************************************************
autocmd FileType make       set noexpandtab
autocmd FileType makefile   set noexpandtab

autocmd FileType eruby      call UseTabs()
autocmd FileType html       call UseTabs()
autocmd FileType xhtml      call UseTabs()
autocmd FileType sh         call UseTabs()
autocmd FileType xml        call UseTabs()

autocmd FileType ruby       set expandtab sw=2 ts=2 sts=2
autocmd FileType python     set expandtab sw=2 ts=2 sts=2
autocmd FileType perl       set expandtab sw=4 ts=4 sts=4
autocmd FileType javascript set expandtab sw=2 ts=2 sts=2
autocmd FileType tex        call Writing()
autocmd FileType plaintex   call Writing()
autocmd FileType vimwiki    call Writing()
autocmd FileType markdown   call Writing()

set wildmode=list:longest                       " Make cmdline tab completion similar to bash
set listchars=tab:\ \ ,extends:>,precedes:<     " Special chars to show tabs, eol and bol

" Save when losing focus
au FocusLost    * :silent! wall

" When vimrc is edited, reload it
autocmd! BufWritePost vimrc source ~/.vimrc


" Cursorline {{{
" Only show cursorline in the current window and in normal mode.
augroup cline
  au!
  au WinLeave * set nocursorline
  au WinEnter * set cursorline
  au InsertEnter * set nocursorline
  au InsertLeave * set cursorline
augroup END
" }}}

" Trailing whitespace {{{
" Only shown when not in insert mode so I don't go insane.
augroup trailing
  au!
  au InsertEnter * :set listchars-=trail:␣
  au InsertLeave * :set listchars+=trail:␣
augroup END

" Remove trailing whitespaces when saving
" Wanna know more? http://vim.wikia.com/wiki/Remove_unwanted_spaces
" If you want to remove trailing spaces when you want, so not automatically,
" see
" http://vim.wikia.com/wiki/Remove_unwanted_spaces#Display_or_remove_unwanted_whitespace_with_a_script.
autocmd BufWritePre * :%s/\s\+$//e
" }}}


" . searching {{{

" sane regexes
nnoremap / /\v
vnoremap / /\v

set ignorecase
set smartcase
set showmatch
set gdefault
set hlsearch

" clear search matching
noremap <leader><space> :noh<cr>:call clearmatches()<cr>

" Don't jump when using * for search
nnoremap * *<c-o>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz

" Open a Quickfix window for the last search.
nnoremap <silent> <leader>? :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

" Highlight word {{{

nnoremap <silent> <leader>hh :execute 'match InterestingWord1 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h1 :execute 'match InterestingWord1 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h2 :execute '2match InterestingWord2 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h3 :execute '3match InterestingWord3 /\<<c-r><c-w>\>/'<cr>

" }}}

" }}}

" Navigation & UI {{{

" Begining & End of line in Normal mode
noremap H ^
noremap L g_

" more natural movement with wrap on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Easy splitted window navigation
noremap <C-h>  <C-w>h
noremap <C-j>  <C-w>j
noremap <C-k>  <C-w>k
noremap <C-l>  <C-w>l

" Easy buffer navigation
noremap <leader>bp :bprevious<cr>
noremap <leader>bn :bnext<cr>

" Splits ,v and ,h to open new splits (vertical and horizontal)
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>h <C-w>s<C-w>j

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Bubbling lines
nmap <C-Up> [e
nmap <C-Down> ]e
vmap <C-Up> [egv
vmap <C-Down> ]egv

" }}}

" . folding {{{

set foldlevelstart=0
set foldmethod=syntax

" Space to toggle folds.
nnoremap <space> za
vnoremap <space> za

" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
nnoremap zO zCzO

" Use ,z to "focus" the current fold.
nnoremap <leader>z zMzvzz

" }}}

" Quick editing {{{

nnoremap <leader>ev <C-w>s<C-w>j:e $MYVIMRC<cr>
nnoremap <leader>es <C-w>s<C-w>j:e ~/.vim/snippets/<cr>
nnoremap <leader>eg <C-w>s<C-w>j:e ~/.gitconfig<cr>
nnoremap <leader>eb <C-w>s<C-w>j:e ~/.bash_profile<cr>
nnoremap <leader>et <C-w>s<C-w>j:e ~/.tmux.conf<cr>

" --------------------

set ofu=syntaxcomplete#Complete
let g:rubycomplete_buffer_loading = 0
let g:rubycomplete_classes_in_global = 1

" showmarks
let g:showmarks_enable = 1
hi! link ShowMarksHLl LineNr
hi! link ShowMarksHLu LineNr
hi! link ShowMarksHLo LineNr
hi! link ShowMarksHLm LineNr

" }}}

" _ Vim {{{
augroup ft_vim
    au!

    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END
" }}}

" _. Gist {{{
" Send visual selection to gist.github.com as a private, filetyped Gist
" Requires the gist command line too (brew install gist)
vnoremap <leader>G :w !gist -p -t %:e \| pbcopy<cr>
" }}}

" TEXT OBJECTS {{{

" Shortcut for [] motion
onoremap ir i[
onoremap ar a[
vnoremap ir i[
vnoremap ar a[

" }}}
